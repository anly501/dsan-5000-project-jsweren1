[
  {
    "objectID": "eda/eda.html",
    "href": "eda/eda.html",
    "title": "Exploratory Data Exploration",
    "section": "",
    "text": "To start off, we will be looking at Census data regarding responents’ primary method of transportation for commuting to work. From our exploratory analysis, we can gather insights on the class distribution, as well as how the mode of transportation relates to demographic variables. Below is a preview of the data, along with bar charts to provide insight on the class distribution of different methods of commuting.\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import boxplot, xlabel, ylabel\ncommute = pd.read_csv('../data/cleaned_data/commute_cleaned.csv')\ncommute = commute.drop(columns='Unnamed: 0')\ncommute.head()\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\n\n\n\n\n\n\n\n\ncity_population_00s\nsex\nage\nmarital_status\nrace\nhispanic\nemployment\nincome\ntransportation_type\ntransportation_time\n\n\n\n\n0\nNaN\nMale\n20\nNever married\nBlack\nNot Hispanic\nEmployed\n6300.0\nPrivate Vehicle\n5\n\n\n1\nNaN\nFemale\n34\nDivorced\nWhite\nNot Hispanic\nEmployed\n10800.0\nOther\n20\n\n\n2\nNaN\nFemale\n20\nNever married\nWhite\nNot Hispanic\nEmployed\n680.0\nPrivate Vehicle\n30\n\n\n3\nNaN\nFemale\n20\nNever married\nOther race\nNot Hispanic\nEmployed\n3000.0\nWalk\n10\n\n\n4\nNaN\nFemale\n19\nNever married\nBlack\nNot Hispanic\nEmployed\n12400.0\nPrivate Vehicle\n15\n\n\n\n\n\n\n\n\n\nCode\nfigure_name = plt.figure(figsize=(8, 4))\ncommute['transportation_type'].value_counts().plot(kind='bar', xlabel=\"Commute Method\", ylabel=\"Count * 10^-6\", title=\"Count of Responses by Commute Method\")\n\n\n&lt;Axes: title={'center': 'Count of Responses by Commute Method'}, xlabel='Commute Method', ylabel='Count * 10^-6'&gt;\n\n\n\n\n\nThis bar plot tells us the class distribution of the six commute methods from the dataset. As we can see, this data is very imbalanced, with private vehicles exceeding the others by nearly an order of magnitude. This will be an important consideration to make when deciding whether or not to over/under-sample for supervised learning.\n\n\nCode\nfigure_name = plt.figure(figsize=(8, 5))\ncommute.groupby(['transportation_type'])['income'].agg('mean').plot.bar(xlabel=\"Commute Method\",ylabel=\"Mean Income (USD)\",title='Mean Income by Commute Method')\n\n\n&lt;Axes: title={'center': 'Mean Income by Commute Method'}, xlabel='Commute Method', ylabel='Mean Income (USD)'&gt;\n\n\n\n\n\nThis bar chart provides valuable insights on the differences in mean income among commute methods. The two notable discrepancies are with those who primarily walk and those who primarily work from home, where the means are visually less and more than the population, respectively. While this visualization is not conclusive, we can recognize how this lines up with intuition. Work-from-home jobs are more likely to be white-collar and thus higher paying, while those who walk to work may do so due to its cost-effectiveness.\n\n\n\n\n\nCode\ncities = pd.read_csv('../data/cleaned_data/apta_cities_cleaned.csv')\ncities = cities.drop(columns='Unnamed: 0')\ncities.head()\n\n\n\n\n\n\n\n\n\nCity\nPopulation\nArea\nCost_per_trip\nFare_per_trip\nMiles_per_trip\nTotal_trips\nTrips_per_capita\n\n\n\n\n0\nSeattle--Tacoma, WA\n3544011\n982.52\n13.906032\n1.570667\n5.786344\n130093841\n36.708080\n\n\n1\nSpokane, WA\n447279\n171.67\n13.433827\n0.988308\n4.772569\n6995911\n15.641045\n\n\n2\nYakima, WA\n133145\n55.77\n19.720093\n1.112531\n5.179168\n513484\n3.856577\n\n\n3\nEugene, OR\n270179\n73.49\n10.851494\n2.753356\n3.684118\n5296214\n19.602612\n\n\n4\nPortland, OR--WA\n2104238\n519.30\n10.804361\n1.025659\n4.011388\n56312874\n26.761647\n\n\n\n\n\n\n\nThe main things we’d like to know about this data are with respect to the relationships and correlations between variables, as well as the distribution of target variables. Ultimately, there are two metrics in this dataset which could be considered performance indicators for a city’s public transity system: Trips_per_capita and Cost_per_trip. The former tells us how much a public transit system is used by its residents, essentially showing its usefulness as a means of transportation. The latter tells us the cost-effectiveness of a public transit system. A city that can maintain a low Cost_per_trip is more likely to consider public transit as a positive, rather than as a burden. Therefore, our exploratory analysis will relate to these goals.\n\n\nCode\n\nfigure_name = plt.figure(figsize=(5, 5))\nsns.heatmap(cities[['Population','Area','Cost_per_trip','Fare_per_trip','Miles_per_trip','Trips_per_capita']].corr(numeric_only=True))\n\n\n&lt;Axes: &gt;\n\n\n\n\n\nThe heatmap above was created using the seaborn package in Python. It gives us a good idea of which variables correlate with one another. Unsurprisingly, population and area are closely correlated. Regarding our target variables, Trips_per_capita appears to have significant positive correlation with both measures of a city’s size, indicating that larger cities spend less per trip. Meanwhile, Cost_per_trip appears to be positively correlated with the fare and length of a trip, indicating that longer trips cost more to a city, and that cities charge more when the trips cost more to them. Finally, the largest negative correlation on this map is between Cost_per_trip and Trips_per_capita, which suggests that people may use public transit less when trips are more expensive.\n\n\nCode\n\nfigure_name = plt.figure(figsize=(5, 5))\np = sns.kdeplot(np.array(cities['Cost_per_trip']))\np.set(xlabel=\"Cost per Trip (USD)\", ylabel=\"Density\", title=\"Cost per Trip Density\")\nplt.show()\n\n\n\n\n\n\n\nCode\n\nfigure_name = plt.figure(figsize=(5, 5))\np = sns.kdeplot(np.array(cities['Trips_per_capita']))\np.set(xlabel=\"Trips per Capita\", ylabel=\"Density\", title=\"Trips per Capita Density\")\nplt.show()\n\n\n\n\n\nThe density plots above were also built using seaborn, in conjunction with matplotlib. From these, we can see similar stories. For both of our target variables, the vast majority of trips per capita and cost per trip are fairly low, while the graphs have large tails on the right side. We will want to analyze the extreme values for both of these variables and see what characteristics of a city lead to values so far from the center of the distribution.\n\n\n\n\n\nCode\nyelp = pd.read_csv('../data/cleaned_data/yelp_cleaned.csv')\nyelp = yelp.drop(columns='Unnamed: 0')\nyelp.head()\n\n\n\n\n\n\n\n\n\nRating\nDate\nReview\nAgency\n\n\n\n\n0\n4\nNov 3, 2023\nWhat do I know, I'm just a stupid tourist who ...\nmta\n\n\n1\n1\nAug 23, 2023\nThis Company is A Literally A Gangsters Mafia ...\nmta\n\n\n2\n1\nNov 29, 2023\nThe Q65 bus tonight has no screens on to show ...\nmta\n\n\n3\n1\nOct 25, 2023\nWhy should customers pay $2.90 for buses that ...\nmta\n\n\n4\n1\nOct 16, 2023\nAre MTA bus drivers supposed to ignore custome...\nmta\n\n\n\n\n\n\n\n\n\nCode\nrating_order = [1,2,3,4,5]\nx = sns.countplot(x = \"Rating\", data = yelp, order = rating_order, hue='Agency')\nx.set(xlabel='Rating', ylabel='Count', title='Count of Ratings by Public Transit Agency')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCode\nwfh_monthly = pd.read_csv('../data/cleaned_data/WFH_city_cleaned.csv')\nwfh_monthly = wfh_monthly.drop(columns='Unnamed: 0')\nwfh_monthly[[\"Atlanta\",\"Bay Area\",\"Chicago\",\"DC\",\"Dallas\",\"Houston\",\"Los Angeles\",\"Miami\",\"New York\"]].describe()\n\n\n\n\n\n\n\n\n\nAtlanta\nBay Area\nChicago\nDC\nDallas\nHouston\nLos Angeles\nMiami\nNew York\n\n\n\n\ncount\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n\n\nmean\n39.354286\n38.928571\n33.077143\n36.657143\n35.574286\n33.628571\n39.720000\n36.051429\n39.600000\n\n\nstd\n4.645260\n4.243789\n2.730879\n4.792107\n3.920035\n3.389306\n4.212363\n3.870429\n3.671272\n\n\nmin\n32.200000\n32.300000\n27.900000\n30.000000\n30.600000\n28.200000\n34.300000\n30.000000\n35.000000\n\n\n25%\n35.600000\n36.050000\n31.300000\n32.850000\n33.450000\n31.450000\n35.850000\n34.100000\n36.750000\n\n\n50%\n39.800000\n39.300000\n32.600000\n37.900000\n35.000000\n33.600000\n40.300000\n36.100000\n39.800000\n\n\n75%\n42.750000\n41.500000\n34.700000\n39.500000\n36.200000\n35.250000\n42.050000\n37.550000\n40.600000\n\n\nmax\n53.200000\n54.200000\n41.500000\n54.800000\n51.900000\n45.500000\n53.700000\n52.800000\n52.500000\n\n\n\n\n\n\n\nThe first notable piece of information about this data is that it begins in October of 2020, which is well after the pandemic’s effects began taking shape. However, the first data point represents data up to and including the information reached on that date, so it is sensible to think of it as an aggregate for the early pandemic. Thus, we should keep in mind that it may be an outlier, as it contains data from a greater date range, from a time that we might assume would have a greater work-from-home rate. The summary statistics above tell us little about the trends, so we will create a line graph to better visualize the data.\n\n\nCode\n\nfigure_name = plt.figure(figsize=(20, 10))\nplt.plot(wfh_monthly['date'], wfh_monthly['Atlanta'], label ='Atlanta')\nplt.plot(wfh_monthly['date'], wfh_monthly['Bay Area'], label ='Bay Area')\nplt.plot(wfh_monthly['date'], wfh_monthly['Chicago'], label ='Chicago')\nplt.plot(wfh_monthly['date'], wfh_monthly['DC'], label ='Washington D.C.')\nplt.plot(wfh_monthly['date'], wfh_monthly['Dallas'], label ='Dallas')\nplt.plot(wfh_monthly['date'], wfh_monthly['Houston'], label ='Houston')\nplt.plot(wfh_monthly['date'], wfh_monthly['Los Angeles'], label ='Los Angeles')\nplt.plot(wfh_monthly['date'], wfh_monthly['Miami'], label ='Miami')\nplt.plot(wfh_monthly['date'], wfh_monthly['New York'], label ='New York')\nplt.xlabel(\"Date\")\nplt.ylabel(\"WFH Percentage\")\nplt.legend()\nplt.gcf().autofmt_xdate()\nplt.show()\n\n\n\n\n\nThis line graph uses matplotlib and shows time series data on how work-from-home percentages have evolved over the course of the pandemic recovery. As we would expect, the highest values come from the earliest data point, which far exceeds any other values for all cities involved. The most notable thing about this data is how all cities follow the same general trend. There is a decline throughout most of 2021, followed by a minor rise at the start of 2022, again followed by a further decline to present day. At the time of the latest recording, all cities have between 30% and 40% of their working hours being done from home. This homogeneity will be notable when drawing conclusions relating to the entire country.\n\n\n\nIn evaluating the future of work-from-home, as well as the social impact it has, it is important to perform EDA on the work-from-home desires of both workers and employers. The summary statistics below show a reality that is expected: workers want more work-from-home days than employers, and both want fewer work-from-home days for workers who are able to work on-site.\n\n\nCode\nwfh_desires = pd.read_csv('../data/cleaned_data/WFH_surveys_cleaned.csv')\nwfh_desires = wfh_desires.drop(columns='Unnamed: 0')\nwfh_desires[['employer_desires_all','employer_desires_able','worker_desires_all','worker_desires_able']].describe()\n\n\n\n\n\n\n\n\n\nemployer_desires_all\nemployer_desires_able\nworker_desires_all\nworker_desires_able\n\n\n\n\ncount\n38.000000\n37.000000\n38.000000\n37.000000\n\n\nmean\n1.359211\n2.045405\n2.270526\n2.807568\n\n\nstd\n0.188628\n0.278932\n0.087763\n0.096650\n\n\nmin\n1.050000\n1.560000\n2.100000\n2.550000\n\n\n25%\n1.177500\n1.800000\n2.190000\n2.770000\n\n\n50%\n1.400000\n2.210000\n2.275000\n2.810000\n\n\n75%\n1.530000\n2.260000\n2.320000\n2.870000\n\n\nmax\n1.610000\n2.370000\n2.470000\n2.970000\n\n\n\n\n\n\n\n\n\nCode\nfigure_name = plt.figure(figsize=(20, 10))\nplt.plot(wfh_desires['date'], wfh_desires['employer_desires_all'], label='Employer Desires for All Workers')\nplt.plot(wfh_desires['date'], wfh_desires['employer_desires_able'], label='Employer Desires for Able Workers')\nplt.plot(wfh_desires['date'], wfh_desires['worker_desires_all'], label='Worker Desires for All Workers')\nplt.plot(wfh_desires['date'], wfh_desires['worker_desires_able'], label='Worker Desires for Able Workers')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Days/Week Requested WFH\")\nplt.legend()\nplt.gcf().autofmt_xdate()\nplt.show()\n\n\n\n\n\nUsing this matplotlib-generated plot, we can see time series data for the four categories. The observations noted above remain true, but there is a clear trend that should be pointed out regarding employer desires. While workers seem to have generally maintained the same expected number of work-from-home days, employers have increased their appetite for more work-from-home days. Further analysis should examine causes for this phenomenon, which could be caused by realizations that work-from-home has merit in some cases, a changing political climate, simply conceding ground to their counterparts, or perhaps an undiscovered reason.\nThus, our hypotheses regarding this data set are: 1. Workers desire more work-from-home days/week than employers 2. Work-from-home desires have remained the same over time\n\n\n\nThis data can provide valuable insight on which forms of public transportation have been most affected. Based on what we can conclude here, there may be indications that some methods should be studied with more emphasis. The summary statistics for this data offer a simple understanding of ridership volume and which methods are used most. However, the bulk of our EDA will focus on correlation between variables to evaluate how these methods’ ridership change alongside one another.\n\n\nCode\nridership_type = pd.read_csv('../data/cleaned_data/ridership_by_quarter_cleaned.csv')\nridership_type = ridership_type.drop(columns='Unnamed: 0')\nridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']].describe()\n\n\n\n\n\n\n\n\n\ntotal_ridership\nheavy_rail\nlight_rail\ncommuter_rail\ntrolleybus\nbus\ndemand_response\nother\n\n\n\n\ncount\n5.300000e+01\n5.300000e+01\n53.000000\n53.000000\n53.000000\n5.300000e+01\n53.000000\n53.000000\n\n\nmean\n2.279058e+06\n8.269957e+05\n113075.698113\n104419.962264\n19331.075472\n1.125994e+06\n47151.716981\n42090.377358\n\n\nstd\n5.826479e+05\n2.299050e+05\n30778.435641\n32376.278023\n5935.076336\n2.695039e+05\n10558.336191\n11875.951653\n\n\nmin\n6.209250e+05\n1.222490e+05\n33137.000000\n13521.000000\n3395.000000\n4.205780e+05\n16907.000000\n11140.000000\n\n\n25%\n2.361673e+06\n8.339910e+05\n112616.000000\n109741.000000\n19598.000000\n1.133805e+06\n46331.000000\n40588.000000\n\n\n50%\n2.538958e+06\n9.270570e+05\n125865.000000\n119043.000000\n21395.000000\n1.234299e+06\n51334.000000\n45071.000000\n\n\n75%\n2.624985e+06\n9.682590e+05\n133233.000000\n125486.000000\n23740.000000\n1.312650e+06\n53673.000000\n49803.000000\n\n\nmax\n2.729424e+06\n1.015234e+06\n140828.000000\n130970.000000\n25051.000000\n1.364993e+06\n59535.000000\n57254.000000\n\n\n\n\n\n\n\n\n\nCode\nsns.pairplot(ridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']], diag_kind='kde', kind=\"scatter\")\n\n\n/Users/joshsweren/anaconda3/envs/dsan5000/lib/python3.11/site-packages/seaborn/axisgrid.py:123: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\n\n\nCode\nprint(ridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']].corr(method='pearson',numeric_only=True))\nsns.heatmap(ridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']].corr(numeric_only=True))\n\n\n                 total_ridership  heavy_rail  light_rail  commuter_rail   \ntotal_ridership         1.000000    0.989721    0.978829       0.979993  \\\nheavy_rail              0.989721    1.000000    0.987208       0.991768   \nlight_rail              0.978829    0.987208    1.000000       0.990598   \ncommuter_rail           0.979993    0.991768    0.990598       1.000000   \ntrolleybus              0.959039    0.923241    0.901781       0.906034   \nbus                     0.987325    0.955084    0.941736       0.940388   \ndemand_response         0.975021    0.976711    0.971167       0.960878   \nother                   0.941060    0.932013    0.933872       0.939074   \n\n                 trolleybus       bus  demand_response     other  \ntotal_ridership    0.959039  0.987325         0.975021  0.941060  \nheavy_rail         0.923241  0.955084         0.976711  0.932013  \nlight_rail         0.901781  0.941736         0.971167  0.933872  \ncommuter_rail      0.906034  0.940388         0.960878  0.939074  \ntrolleybus         1.000000  0.976065         0.908239  0.914181  \nbus                0.976065  1.000000         0.949469  0.920445  \ndemand_response    0.908239  0.949469         1.000000  0.901680  \nother              0.914181  0.920445         0.901680  1.000000  \n\n\n&lt;Axes: &gt;\n\n\n\n\n\nBy using the seaborn package, we can obtain a pairplot, a correlation matrix, and a heatmap to visualize correlation between the ridership of different modes of public transportation. From this, we can see that no Pearson correlation fails to exceed 0.9, indicating strong correlation between all variables. Thus, our refined hypothesis is that all methods of public transportation are impacted equally by the decline and/or resurgence of public transit usage."
  },
  {
    "objectID": "eda/eda.html#data-exploration",
    "href": "eda/eda.html#data-exploration",
    "title": "Exploratory Data Exploration",
    "section": "",
    "text": "To start off, we will be looking at Census data regarding responents’ primary method of transportation for commuting to work. From our exploratory analysis, we can gather insights on the class distribution, as well as how the mode of transportation relates to demographic variables. Below is a preview of the data, along with bar charts to provide insight on the class distribution of different methods of commuting.\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import boxplot, xlabel, ylabel\ncommute = pd.read_csv('../data/cleaned_data/commute_cleaned.csv')\ncommute = commute.drop(columns='Unnamed: 0')\ncommute.head()\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\n\n\n\n\n\n\n\n\ncity_population_00s\nsex\nage\nmarital_status\nrace\nhispanic\nemployment\nincome\ntransportation_type\ntransportation_time\n\n\n\n\n0\nNaN\nMale\n20\nNever married\nBlack\nNot Hispanic\nEmployed\n6300.0\nPrivate Vehicle\n5\n\n\n1\nNaN\nFemale\n34\nDivorced\nWhite\nNot Hispanic\nEmployed\n10800.0\nOther\n20\n\n\n2\nNaN\nFemale\n20\nNever married\nWhite\nNot Hispanic\nEmployed\n680.0\nPrivate Vehicle\n30\n\n\n3\nNaN\nFemale\n20\nNever married\nOther race\nNot Hispanic\nEmployed\n3000.0\nWalk\n10\n\n\n4\nNaN\nFemale\n19\nNever married\nBlack\nNot Hispanic\nEmployed\n12400.0\nPrivate Vehicle\n15\n\n\n\n\n\n\n\n\n\nCode\nfigure_name = plt.figure(figsize=(8, 4))\ncommute['transportation_type'].value_counts().plot(kind='bar', xlabel=\"Commute Method\", ylabel=\"Count * 10^-6\", title=\"Count of Responses by Commute Method\")\n\n\n&lt;Axes: title={'center': 'Count of Responses by Commute Method'}, xlabel='Commute Method', ylabel='Count * 10^-6'&gt;\n\n\n\n\n\nThis bar plot tells us the class distribution of the six commute methods from the dataset. As we can see, this data is very imbalanced, with private vehicles exceeding the others by nearly an order of magnitude. This will be an important consideration to make when deciding whether or not to over/under-sample for supervised learning.\n\n\nCode\nfigure_name = plt.figure(figsize=(8, 5))\ncommute.groupby(['transportation_type'])['income'].agg('mean').plot.bar(xlabel=\"Commute Method\",ylabel=\"Mean Income (USD)\",title='Mean Income by Commute Method')\n\n\n&lt;Axes: title={'center': 'Mean Income by Commute Method'}, xlabel='Commute Method', ylabel='Mean Income (USD)'&gt;\n\n\n\n\n\nThis bar chart provides valuable insights on the differences in mean income among commute methods. The two notable discrepancies are with those who primarily walk and those who primarily work from home, where the means are visually less and more than the population, respectively. While this visualization is not conclusive, we can recognize how this lines up with intuition. Work-from-home jobs are more likely to be white-collar and thus higher paying, while those who walk to work may do so due to its cost-effectiveness.\n\n\n\n\n\nCode\ncities = pd.read_csv('../data/cleaned_data/apta_cities_cleaned.csv')\ncities = cities.drop(columns='Unnamed: 0')\ncities.head()\n\n\n\n\n\n\n\n\n\nCity\nPopulation\nArea\nCost_per_trip\nFare_per_trip\nMiles_per_trip\nTotal_trips\nTrips_per_capita\n\n\n\n\n0\nSeattle--Tacoma, WA\n3544011\n982.52\n13.906032\n1.570667\n5.786344\n130093841\n36.708080\n\n\n1\nSpokane, WA\n447279\n171.67\n13.433827\n0.988308\n4.772569\n6995911\n15.641045\n\n\n2\nYakima, WA\n133145\n55.77\n19.720093\n1.112531\n5.179168\n513484\n3.856577\n\n\n3\nEugene, OR\n270179\n73.49\n10.851494\n2.753356\n3.684118\n5296214\n19.602612\n\n\n4\nPortland, OR--WA\n2104238\n519.30\n10.804361\n1.025659\n4.011388\n56312874\n26.761647\n\n\n\n\n\n\n\nThe main things we’d like to know about this data are with respect to the relationships and correlations between variables, as well as the distribution of target variables. Ultimately, there are two metrics in this dataset which could be considered performance indicators for a city’s public transity system: Trips_per_capita and Cost_per_trip. The former tells us how much a public transit system is used by its residents, essentially showing its usefulness as a means of transportation. The latter tells us the cost-effectiveness of a public transit system. A city that can maintain a low Cost_per_trip is more likely to consider public transit as a positive, rather than as a burden. Therefore, our exploratory analysis will relate to these goals.\n\n\nCode\n\nfigure_name = plt.figure(figsize=(5, 5))\nsns.heatmap(cities[['Population','Area','Cost_per_trip','Fare_per_trip','Miles_per_trip','Trips_per_capita']].corr(numeric_only=True))\n\n\n&lt;Axes: &gt;\n\n\n\n\n\nThe heatmap above was created using the seaborn package in Python. It gives us a good idea of which variables correlate with one another. Unsurprisingly, population and area are closely correlated. Regarding our target variables, Trips_per_capita appears to have significant positive correlation with both measures of a city’s size, indicating that larger cities spend less per trip. Meanwhile, Cost_per_trip appears to be positively correlated with the fare and length of a trip, indicating that longer trips cost more to a city, and that cities charge more when the trips cost more to them. Finally, the largest negative correlation on this map is between Cost_per_trip and Trips_per_capita, which suggests that people may use public transit less when trips are more expensive.\n\n\nCode\n\nfigure_name = plt.figure(figsize=(5, 5))\np = sns.kdeplot(np.array(cities['Cost_per_trip']))\np.set(xlabel=\"Cost per Trip (USD)\", ylabel=\"Density\", title=\"Cost per Trip Density\")\nplt.show()\n\n\n\n\n\n\n\nCode\n\nfigure_name = plt.figure(figsize=(5, 5))\np = sns.kdeplot(np.array(cities['Trips_per_capita']))\np.set(xlabel=\"Trips per Capita\", ylabel=\"Density\", title=\"Trips per Capita Density\")\nplt.show()\n\n\n\n\n\nThe density plots above were also built using seaborn, in conjunction with matplotlib. From these, we can see similar stories. For both of our target variables, the vast majority of trips per capita and cost per trip are fairly low, while the graphs have large tails on the right side. We will want to analyze the extreme values for both of these variables and see what characteristics of a city lead to values so far from the center of the distribution.\n\n\n\n\n\nCode\nyelp = pd.read_csv('../data/cleaned_data/yelp_cleaned.csv')\nyelp = yelp.drop(columns='Unnamed: 0')\nyelp.head()\n\n\n\n\n\n\n\n\n\nRating\nDate\nReview\nAgency\n\n\n\n\n0\n4\nNov 3, 2023\nWhat do I know, I'm just a stupid tourist who ...\nmta\n\n\n1\n1\nAug 23, 2023\nThis Company is A Literally A Gangsters Mafia ...\nmta\n\n\n2\n1\nNov 29, 2023\nThe Q65 bus tonight has no screens on to show ...\nmta\n\n\n3\n1\nOct 25, 2023\nWhy should customers pay $2.90 for buses that ...\nmta\n\n\n4\n1\nOct 16, 2023\nAre MTA bus drivers supposed to ignore custome...\nmta\n\n\n\n\n\n\n\n\n\nCode\nrating_order = [1,2,3,4,5]\nx = sns.countplot(x = \"Rating\", data = yelp, order = rating_order, hue='Agency')\nx.set(xlabel='Rating', ylabel='Count', title='Count of Ratings by Public Transit Agency')\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCode\nwfh_monthly = pd.read_csv('../data/cleaned_data/WFH_city_cleaned.csv')\nwfh_monthly = wfh_monthly.drop(columns='Unnamed: 0')\nwfh_monthly[[\"Atlanta\",\"Bay Area\",\"Chicago\",\"DC\",\"Dallas\",\"Houston\",\"Los Angeles\",\"Miami\",\"New York\"]].describe()\n\n\n\n\n\n\n\n\n\nAtlanta\nBay Area\nChicago\nDC\nDallas\nHouston\nLos Angeles\nMiami\nNew York\n\n\n\n\ncount\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n35.000000\n\n\nmean\n39.354286\n38.928571\n33.077143\n36.657143\n35.574286\n33.628571\n39.720000\n36.051429\n39.600000\n\n\nstd\n4.645260\n4.243789\n2.730879\n4.792107\n3.920035\n3.389306\n4.212363\n3.870429\n3.671272\n\n\nmin\n32.200000\n32.300000\n27.900000\n30.000000\n30.600000\n28.200000\n34.300000\n30.000000\n35.000000\n\n\n25%\n35.600000\n36.050000\n31.300000\n32.850000\n33.450000\n31.450000\n35.850000\n34.100000\n36.750000\n\n\n50%\n39.800000\n39.300000\n32.600000\n37.900000\n35.000000\n33.600000\n40.300000\n36.100000\n39.800000\n\n\n75%\n42.750000\n41.500000\n34.700000\n39.500000\n36.200000\n35.250000\n42.050000\n37.550000\n40.600000\n\n\nmax\n53.200000\n54.200000\n41.500000\n54.800000\n51.900000\n45.500000\n53.700000\n52.800000\n52.500000\n\n\n\n\n\n\n\nThe first notable piece of information about this data is that it begins in October of 2020, which is well after the pandemic’s effects began taking shape. However, the first data point represents data up to and including the information reached on that date, so it is sensible to think of it as an aggregate for the early pandemic. Thus, we should keep in mind that it may be an outlier, as it contains data from a greater date range, from a time that we might assume would have a greater work-from-home rate. The summary statistics above tell us little about the trends, so we will create a line graph to better visualize the data.\n\n\nCode\n\nfigure_name = plt.figure(figsize=(20, 10))\nplt.plot(wfh_monthly['date'], wfh_monthly['Atlanta'], label ='Atlanta')\nplt.plot(wfh_monthly['date'], wfh_monthly['Bay Area'], label ='Bay Area')\nplt.plot(wfh_monthly['date'], wfh_monthly['Chicago'], label ='Chicago')\nplt.plot(wfh_monthly['date'], wfh_monthly['DC'], label ='Washington D.C.')\nplt.plot(wfh_monthly['date'], wfh_monthly['Dallas'], label ='Dallas')\nplt.plot(wfh_monthly['date'], wfh_monthly['Houston'], label ='Houston')\nplt.plot(wfh_monthly['date'], wfh_monthly['Los Angeles'], label ='Los Angeles')\nplt.plot(wfh_monthly['date'], wfh_monthly['Miami'], label ='Miami')\nplt.plot(wfh_monthly['date'], wfh_monthly['New York'], label ='New York')\nplt.xlabel(\"Date\")\nplt.ylabel(\"WFH Percentage\")\nplt.legend()\nplt.gcf().autofmt_xdate()\nplt.show()\n\n\n\n\n\nThis line graph uses matplotlib and shows time series data on how work-from-home percentages have evolved over the course of the pandemic recovery. As we would expect, the highest values come from the earliest data point, which far exceeds any other values for all cities involved. The most notable thing about this data is how all cities follow the same general trend. There is a decline throughout most of 2021, followed by a minor rise at the start of 2022, again followed by a further decline to present day. At the time of the latest recording, all cities have between 30% and 40% of their working hours being done from home. This homogeneity will be notable when drawing conclusions relating to the entire country.\n\n\n\nIn evaluating the future of work-from-home, as well as the social impact it has, it is important to perform EDA on the work-from-home desires of both workers and employers. The summary statistics below show a reality that is expected: workers want more work-from-home days than employers, and both want fewer work-from-home days for workers who are able to work on-site.\n\n\nCode\nwfh_desires = pd.read_csv('../data/cleaned_data/WFH_surveys_cleaned.csv')\nwfh_desires = wfh_desires.drop(columns='Unnamed: 0')\nwfh_desires[['employer_desires_all','employer_desires_able','worker_desires_all','worker_desires_able']].describe()\n\n\n\n\n\n\n\n\n\nemployer_desires_all\nemployer_desires_able\nworker_desires_all\nworker_desires_able\n\n\n\n\ncount\n38.000000\n37.000000\n38.000000\n37.000000\n\n\nmean\n1.359211\n2.045405\n2.270526\n2.807568\n\n\nstd\n0.188628\n0.278932\n0.087763\n0.096650\n\n\nmin\n1.050000\n1.560000\n2.100000\n2.550000\n\n\n25%\n1.177500\n1.800000\n2.190000\n2.770000\n\n\n50%\n1.400000\n2.210000\n2.275000\n2.810000\n\n\n75%\n1.530000\n2.260000\n2.320000\n2.870000\n\n\nmax\n1.610000\n2.370000\n2.470000\n2.970000\n\n\n\n\n\n\n\n\n\nCode\nfigure_name = plt.figure(figsize=(20, 10))\nplt.plot(wfh_desires['date'], wfh_desires['employer_desires_all'], label='Employer Desires for All Workers')\nplt.plot(wfh_desires['date'], wfh_desires['employer_desires_able'], label='Employer Desires for Able Workers')\nplt.plot(wfh_desires['date'], wfh_desires['worker_desires_all'], label='Worker Desires for All Workers')\nplt.plot(wfh_desires['date'], wfh_desires['worker_desires_able'], label='Worker Desires for Able Workers')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Days/Week Requested WFH\")\nplt.legend()\nplt.gcf().autofmt_xdate()\nplt.show()\n\n\n\n\n\nUsing this matplotlib-generated plot, we can see time series data for the four categories. The observations noted above remain true, but there is a clear trend that should be pointed out regarding employer desires. While workers seem to have generally maintained the same expected number of work-from-home days, employers have increased their appetite for more work-from-home days. Further analysis should examine causes for this phenomenon, which could be caused by realizations that work-from-home has merit in some cases, a changing political climate, simply conceding ground to their counterparts, or perhaps an undiscovered reason.\nThus, our hypotheses regarding this data set are: 1. Workers desire more work-from-home days/week than employers 2. Work-from-home desires have remained the same over time\n\n\n\nThis data can provide valuable insight on which forms of public transportation have been most affected. Based on what we can conclude here, there may be indications that some methods should be studied with more emphasis. The summary statistics for this data offer a simple understanding of ridership volume and which methods are used most. However, the bulk of our EDA will focus on correlation between variables to evaluate how these methods’ ridership change alongside one another.\n\n\nCode\nridership_type = pd.read_csv('../data/cleaned_data/ridership_by_quarter_cleaned.csv')\nridership_type = ridership_type.drop(columns='Unnamed: 0')\nridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']].describe()\n\n\n\n\n\n\n\n\n\ntotal_ridership\nheavy_rail\nlight_rail\ncommuter_rail\ntrolleybus\nbus\ndemand_response\nother\n\n\n\n\ncount\n5.300000e+01\n5.300000e+01\n53.000000\n53.000000\n53.000000\n5.300000e+01\n53.000000\n53.000000\n\n\nmean\n2.279058e+06\n8.269957e+05\n113075.698113\n104419.962264\n19331.075472\n1.125994e+06\n47151.716981\n42090.377358\n\n\nstd\n5.826479e+05\n2.299050e+05\n30778.435641\n32376.278023\n5935.076336\n2.695039e+05\n10558.336191\n11875.951653\n\n\nmin\n6.209250e+05\n1.222490e+05\n33137.000000\n13521.000000\n3395.000000\n4.205780e+05\n16907.000000\n11140.000000\n\n\n25%\n2.361673e+06\n8.339910e+05\n112616.000000\n109741.000000\n19598.000000\n1.133805e+06\n46331.000000\n40588.000000\n\n\n50%\n2.538958e+06\n9.270570e+05\n125865.000000\n119043.000000\n21395.000000\n1.234299e+06\n51334.000000\n45071.000000\n\n\n75%\n2.624985e+06\n9.682590e+05\n133233.000000\n125486.000000\n23740.000000\n1.312650e+06\n53673.000000\n49803.000000\n\n\nmax\n2.729424e+06\n1.015234e+06\n140828.000000\n130970.000000\n25051.000000\n1.364993e+06\n59535.000000\n57254.000000\n\n\n\n\n\n\n\n\n\nCode\nsns.pairplot(ridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']], diag_kind='kde', kind=\"scatter\")\n\n\n/Users/joshsweren/anaconda3/envs/dsan5000/lib/python3.11/site-packages/seaborn/axisgrid.py:123: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\n\n\nCode\nprint(ridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']].corr(method='pearson',numeric_only=True))\nsns.heatmap(ridership_type[['total_ridership','heavy_rail','light_rail','commuter_rail','trolleybus','bus','demand_response','other']].corr(numeric_only=True))\n\n\n                 total_ridership  heavy_rail  light_rail  commuter_rail   \ntotal_ridership         1.000000    0.989721    0.978829       0.979993  \\\nheavy_rail              0.989721    1.000000    0.987208       0.991768   \nlight_rail              0.978829    0.987208    1.000000       0.990598   \ncommuter_rail           0.979993    0.991768    0.990598       1.000000   \ntrolleybus              0.959039    0.923241    0.901781       0.906034   \nbus                     0.987325    0.955084    0.941736       0.940388   \ndemand_response         0.975021    0.976711    0.971167       0.960878   \nother                   0.941060    0.932013    0.933872       0.939074   \n\n                 trolleybus       bus  demand_response     other  \ntotal_ridership    0.959039  0.987325         0.975021  0.941060  \nheavy_rail         0.923241  0.955084         0.976711  0.932013  \nlight_rail         0.901781  0.941736         0.971167  0.933872  \ncommuter_rail      0.906034  0.940388         0.960878  0.939074  \ntrolleybus         1.000000  0.976065         0.908239  0.914181  \nbus                0.976065  1.000000         0.949469  0.920445  \ndemand_response    0.908239  0.949469         1.000000  0.901680  \nother              0.914181  0.920445         0.901680  1.000000  \n\n\n&lt;Axes: &gt;\n\n\n\n\n\nBy using the seaborn package, we can obtain a pairplot, a correlation matrix, and a heatmap to visualize correlation between the ridership of different modes of public transportation. From this, we can see that no Pearson correlation fails to exceed 0.9, indicating strong correlation between all variables. Thus, our refined hypothesis is that all methods of public transportation are impacted equally by the decline and/or resurgence of public transit usage."
  },
  {
    "objectID": "decision_trees/classification/classification.html",
    "href": "decision_trees/classification/classification.html",
    "title": "Classification",
    "section": "",
    "text": "Note: Decision Tree introduction is on Regression tab.\nFor classification Decision Trees, the target variable takes a discrete set of values. Unlike regression trees where the aim is to predict a generalized value for the target variable, classification trees attempt to assign class labels to records based on a given set of labels in training data. Thus, each leaf is a particular class label, serving as a prediction for all records that follow its respective sequence of conditions."
  },
  {
    "objectID": "decision_trees/classification/classification.html#introduction-to-classification-decision-trees",
    "href": "decision_trees/classification/classification.html#introduction-to-classification-decision-trees",
    "title": "Classification",
    "section": "",
    "text": "Note: Decision Tree introduction is on Regression tab.\nFor classification Decision Trees, the target variable takes a discrete set of values. Unlike regression trees where the aim is to predict a generalized value for the target variable, classification trees attempt to assign class labels to records based on a given set of labels in training data. Thus, each leaf is a particular class label, serving as a prediction for all records that follow its respective sequence of conditions."
  },
  {
    "objectID": "decision_trees/classification/classification.html#classification-trees-for-record-data",
    "href": "decision_trees/classification/classification.html#classification-trees-for-record-data",
    "title": "Classification",
    "section": "Classification Trees for Record Data",
    "text": "Classification Trees for Record Data\n\nClass Distribution\nThe record data we will be using comes from the IPUMS dataset containing results from the US Census Bureau. Our target variable will be commute_method, which each respondents answer to what their primary mode of transportation is for work. As this data has been cleaned, this categorical variable is portrayed via text with the following classes, with their respective totals:\n\nPrivate Vehicle - 103458 answers\nPublic Transit - 18319\nBicycle - 1853\nWalked - 8582\nWorked from Home - 44857\nOther - 2517\n\nThe following is a visualization of the class distribution:\n\n\nCode\nipums &lt;- read.csv(\"../../data/cleaned_data/ipums_cleaned.csv\")\nbarplot(table(ipums$transportation_type), main=\"Distribution of Commute Methods\",\n   xlab=\"Commute Method\", ylab=\"Number of Responses\", \n        cex.axis=.8, cex.names=.8)\n\n\n\n\n\nDistribution of Commute Methods\n\n\n\n\nOver/under-sampling\nAs we can see the bar graph, Private Vehicle and Worked from Home make up a significant majority of the data in this set. This creates problems for classification, as the algorithm will tend to predict only those classes to maximize accuracy. Thus, it is common practice to under-sample from those classes to gain better insights.\nWhile this will produce a tree that better represents predictions for each class, it is important to note that this is not the distribution of the original data. For this purpose, we will remove a random sample of 85,000 Private Vehicle responses and 26,000 Worked from Home responses. The code for that is below, with the new class distribution:\n\n\nCode\nipums2 &lt;- ipums[-sample(which(ipums$commute_method==\"Private Vehicle\"), 85000),]\nipums2 &lt;- ipums2[-sample(which(ipums2$commute_method==\"Worked From Home\"), 26000),]\ntable(ipums2$commute_method)\n\n\nSyntaxError: invalid syntax (1274090368.py, line 2)\n\n\n\n\n\nDistribution of Commute Methods\n\n\n\n\nApplying the Model\nAfter re-sizing the data, we can now split the records into training and testing sets and generate a decision tree. This is done using the rpart and rattle libraries in R. The code and outputs are below:\n\n\nCode\ntrain_size2 &lt;- floor(nrow(ipums2)*(.8))\ntest_size2 &lt;- nrow(ipums2) - train_size2\nset.seed(1000)\ntrain2 &lt;- ipums2[sample(nrow(ipums2), train_size2,replace=FALSE),]\ntest2 &lt;- ipums2[-sample(nrow(ipums2), train_size2,replace=FALSE),]\nipums_tree2 &lt;- rpart(transportation_type ~ city_population_00s + age + income, data = train2, method=\"class\")\nfancyRpartPlot(ipums_tree2,main = \"Commute Method Decision Tree\")\n\n\n\n\n\nCommute Methods Decision Tree\n\n\nThe main things to note from this tree are the variables included in each condition. Firstly, we can notice that respondents with lower incomes are more likely to be placed in the Public Transit class than those with high incomes. Additionally, those in cities with greater populations are more likely to take Public Transit according to this data.\n\n\nResults\nThe results of this classification tree are below:\n\n\nCode\nlibrary(cvms)\nprediction2 = predict(ipums_tree2, test2[,-which(names(test) %in% c(\"transportation_type\"))], type=\"class\")\nconf_mat &lt;- confusion_matrix(targets = test2$commute_method,\n                             predictions = prediction2)\nplot_confusion_matrix(conf_mat$`Confusion Matrix`[[1]], rotate_y_text = FALSE)\n\n\n\n\n\nConfusion Matrix\n\n\nWhile it is notable that no predictions went to the Walked, Bicycle, and Worked From Home classes, we can still gather information from the accuracy given by this confusion matrix. Ultimately, values on the diagonals are the largest values for each of the three populated rows, indicating relative accuracy from the model."
  },
  {
    "objectID": "decision_trees/classification/classification.html#classification-trees-for-text-data",
    "href": "decision_trees/classification/classification.html#classification-trees-for-text-data",
    "title": "Classification",
    "section": "Classification Trees for Text Data",
    "text": "Classification Trees for Text Data\nNote: Code for this section partially repurposed from DSAN-5000 Lab 3.2\nIn order to create classification trees for text data, we will pull in Yelp reviews data that we had cleaned prior. As in previous steps, the nltk package will be particularly useful for lemmatizing our text, removing stopwords and stoplemmas, and ensuring only English letters are present in the data. The code for this is below, along with a word cloud of the entire dataset to visualize the most common words used by Yelp reviewers of public transit systems.\n\n\nCode\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import stopwords\nfrom tqdm import tqdm\nimport string\nfrom collections import Counter\ntqdm.pandas()\ntoken_counter = Counter()\nimport pandas as pd\nyelp=pd.read_csv('../../data/cleaned_data/yelp_cleaned.csv') \nlemmatizer = WordNetLemmatizer()\ncustom_stoplemmas = [\n    'be',\n    'ir',\n    'll',\n    'nt',\n    'quot',\n    'rd',\n    's',\n    've'\n]\n\ndef remove_special_chars(token):\n  return token.translate(str.maketrans('', '', string.punctuation))\n\ndef remove_digits(token):\n  return ''.join([c for c in token if not c.isdigit()])\n\ndef clean_review(review_text):\n  review_cleaned = review_text.lower()\n  review_sents = sent_tokenize(review_cleaned)\n  clean_sents = []\n  for cur_sent in review_sents:\n    sent_tokens = word_tokenize(cur_sent)\n    sent_tokens_cleaned = [t for t in sent_tokens if t not in stopwords.words('english')]\n    sent_tokens_cleaned = [remove_digits(t) for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [t.replace(\"-\", \" \") for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [remove_special_chars(t) for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [t for t in sent_tokens_cleaned if len(t) &gt; 0]\n    sent_tokens_cleaned = [lemmatizer.lemmatize(t) for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [t for t in sent_tokens_cleaned if t not in custom_stoplemmas]\n    token_counter.update(sent_tokens_cleaned)\n    clean_sent = ' '.join(sent_tokens_cleaned)\n    clean_sents.append(clean_sent)\n  review_final = \". \".join(clean_sents)\n  return review_final\nyelp['Review_clean'] = yelp['Review'].progress_apply(clean_review)\nimport wordcloud\nimport matplotlib.pyplot as plt\nwordcloud = wordcloud.WordCloud(min_word_length = 2,max_words = 200).generate(yelp['Review_clean'].str.cat())\nfig = plt.figure(figsize=(15,10))\nplt.imshow(wordcloud)\nplt.title('Yelp Word Cloud',fontsize = 25)\n\n\n100%|██████████| 2435/2435 [00:30&lt;00:00, 78.62it/s] \n\n\nText(0.5, 1.0, 'Yelp Word Cloud')\n\n\n\n\n\n\nClass Distribution\nAs noticed in Exploratory Data Analysis, the data for Yelp ratings has a significantly imbalanced distribution, with ratings of 1 having more than twice the frequency of any other rating class. Thus, for supervised learning, we will once again perform under-sampling to even out this distribution by removing 500 random reviews with a rating of 1. It is important to reiterate that while this will ultimately produce improved results for classification, this no longer represents the true class distribution from the original data. This process’s code, along with the new class distribution, is below.\n\n\nCode\nimport seaborn as sns\nyelp = yelp.drop(yelp[yelp['Rating']==1].sample(n=500).index)\nrating_order = [1,2,3,4,5]\nsns.countplot(x = \"Rating\", data = yelp, order = rating_order)\n\n\n&lt;Axes: xlabel='Rating', ylabel='count'&gt;\n\n\n\n\n\nUpon preparing the data for supervised learning, we can now create a corpus and vectore the data. The next step will be to split the data into training and testing datasets using the sklearn package.\n\n\nCode\ncorpus=yelp[\"Review\"].to_list()\ny=yelp[\"Rating\"].to_numpy()\nvectorizer=CountVectorizer(min_df=0.001)   \n\nXs  =  vectorizer.fit_transform(corpus)   \nX=np.array(Xs.todense())\n\nmaxs=np.max(X,axis=0)\nX=np.ceil(X/maxs)\n\nfrom sklearn.model_selection import train_test_split\ntest_ratio=0.2\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=test_ratio, random_state=0)\ny_train=y_train.flatten()\ny_test=y_test.flatten()\n\n\nFor classifying text data, we will be using the KNeighborsClassifier() function in sklearn. To use this, we must initialize a model with a specified number of “neighbors” for the algorithm to take as an input. Therefore, we will use a loop to determine the optimal number of neighbors to set. The function for this is below, where we will iterate over values 1 to 40 as potential input values.\n\n\nCode\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# HYPER PARAMETER SEARCH FOR OPTIMAL NUMBER OF NEIGHBORS \nnum_neighbors=[]\ntrain_accuracy=[]\ntest_accuracy=[]\n\n# LOOP OVER HYPER-PARAM\nfor i in range(1,40): \n    model = KNeighborsClassifier(n_neighbors=i)\n\n    model.fit(x_train,y_train)\n\n    yp_train = model.predict(x_train)\n    yp_test = model.predict(x_test)\n\n    acc1=accuracy_score(y_train, yp_train)*100\n    acc2=accuracy_score(y_test, yp_test)*100\n\n    num_neighbors.append(i)\n    train_accuracy.append(acc1)\n    test_accuracy.append(acc2)\n\n\n\n\nCode\nplt.plot(num_neighbors,train_accuracy ,linewidth=2, color='k')\nplt.plot(num_neighbors,test_accuracy ,linewidth=2, color='b')\n\nplt.xlabel(\"Number of neighbors in KNN\")\nplt.ylabel(\"Training (black) and test (blue) accuracy\")\n\n\nText(0, 0.5, 'Training (black) and test (blue) accuracy')\n\n\n\n\n\nWith this convergence plot, we are looking for the value on the x-axis at which the blue line (the test accuracy) stops climbing (i.e., where it converges with the black line). This appars to happen at around 33, so we will select 33 as the input for number of neighbors in our K-nearest neighbors algorithm.\n\n\nCode\ndef report(y,ypred):\n      print(\"Accuracy:\",accuracy_score(y, ypred)*100)\n      print(\"Number of mislabeled points out of a total %d points = %d\"\n            % (y.shape[0], (y != ypred).sum()))\ndef print_model_summary():\n      yp_train = model.predict(x_train)\n      yp_test = model.predict(x_test)\n\n      print(\"ACCURACY CALCULATION\\n\")\n\n      print(\"TRAINING SET:\")\n      report(y_train,yp_train)\n\n      print(\"\\nTEST SET (UNTRAINED DATA):\")\n      report(y_test,yp_test)\n\n      print(\"\\nCHECK FIRST 20 PREDICTIONS\")\n      print(\"TRAINING SET:\")\n      print(y_train[0:20])\n      print(yp_train[0:20])\n      print(\"ERRORS:\",yp_train[0:20]-y_train[0:20])\n\n      print(\"\\nTEST SET (UNTRAINED DATA):\")\n      print(y_test[0:20])\n      print(yp_test[0:20])\n      print(\"ERRORS:\",yp_test[0:20]-y_test[0:20])\n\nmodel = KNeighborsClassifier(n_neighbors=33)\n\nmodel.fit(x_train,y_train)\nprint_model_summary()\n\n\nACCURACY CALCULATION\n\nTRAINING SET:\nAccuracy: 41.98966408268734\nNumber of mislabeled points out of a total 1548 points = 898\n\nTEST SET (UNTRAINED DATA):\nAccuracy: 39.01808785529715\nNumber of mislabeled points out of a total 387 points = 236\n\nCHECK FIRST 20 PREDICTIONS\nTRAINING SET:\n[1 3 1 5 4 3 3 1 1 1 4 3 5 3 2 4 4 4 3 1]\n[1 3 4 3 1 3 3 1 1 1 3 4 4 3 1 1 1 4 3 1]\nERRORS: [ 0  0  3 -2 -3  0  0  0  0  0 -1  1 -1  0 -1 -3 -3  0  0  0]\n\nTEST SET (UNTRAINED DATA):\n[2 2 4 5 3 3 1 5 2 5 4 4 1 2 1 2 3 1 5 1]\n[3 1 3 1 4 3 3 4 4 1 4 4 1 1 1 1 5 1 4 3]\nERRORS: [ 1 -1 -1 -4  1  0  2 -1  2 -4  0  0  0 -1  0 -1  2  0 -1  2]\n\n\n\n\nCode\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncm = confusion_matrix(y_train, model.predict(x_train), labels=model.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\ndisp.plot()\nplt.show()\n\n\n\n\n\n\n\nCode\ncm = confusion_matrix(y_test, model.predict(x_test), labels=model.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\ndisp.plot()\nplt.show()\n\n\n\n\n\nThe above results show that classification is somewhat effective in predicting Rating values from the text. An accuracy of around 40 for both the train and test datasets is clearly much better than random chance, although it is still more likely than not that a prediction will be incorrect. From looking at the confusion matrices, we can see one of the reasons why. With K-nearest neighbors, it appears that the model over-predicted ratings of 1, since that was the mode. Additionally, the text may be more pronounced in that group since it is an extreme–there may be more noticeable characteristics of a very poor review than of any other group. However, we do see more pronounced cells on the diagonal, which indicates some degree of predictive value from this supervised learning technique."
  },
  {
    "objectID": "decision_trees/classification/classification.html#conclusions",
    "href": "decision_trees/classification/classification.html#conclusions",
    "title": "Classification",
    "section": "Conclusions",
    "text": "Conclusions\nTo go back to our research questions, the information from our record can give us insight into who is affected by the performance and ubiquity of public transit systems. As our record data shows, public transit is disproportionally used as a means of commuting to work by people in larger cities with lower incomes. Thus, there is societal value in upholding these institutions, as they offer services to those who often depend on them.\nOur text data was less definitive in its ability to produce meaningful classifications, but we can say that due to the somewhat significant accuracy, we can conclude that there are textual characteristics associated with different rating values."
  },
  {
    "objectID": "decision_trees/regression/regression.html",
    "href": "decision_trees/regression/regression.html",
    "title": "Regression",
    "section": "",
    "text": "Decision Trees are a supervised learning technique that uses non-parametric methods for classification and regression. This differs from many disciplines of mathematical modeling, as non-parametric statistics do not make assumptions about the distribution of the sample’s population. Thus, regardless of the distribution, Decision Trees attempt to create models from the data simply by creating sequential sets of rules. These rules can be interpreted as sets of if-else statements, as we would understand them in programming. In this regard, Decision Trees follow the process of creating a conditions, assessing whether or not an observation follows that condition, and assigns an outcome based on the result. This can then be repeated iteratively to the resulting value when applying a different condition, thus creating a set of splits with different trajectories to resemble a tree diagram.\nAs mentioned above, Decision Trees can be categorized into two methods: classification and regression. Classification Decision Trees will be recapped on the Classification tab of this section.\n\n\nRegression trees are specifically used for when a target variable takes on continuous values. To do this, they attempt to estimate the local nature of the underlying function (i.e., how a particular variable impacts the target at a certain value or range of values), rather than the global shape of the data.\nTherefore, each condition will be a question of whether a record fits a value or a range of values for a particular variable, and each node is a predicted numerical output that will estimate the target based on a condition. Due to the discrete nature of decision trees and the fact that the target variable is continuous, this can result in large error, so applying error metrics is crucial.\nOne method that will be applied below is pruning, which is a very common way of simplifying trees. Doing this cuts down on the number of leaves by replacing excess nodes and their respective subtrees with singular leaves. This can significantly reduce the size of a tree, as well as improve performance in cases where accuracy of a training set deteriorates as overfitting begins to occur.\nSecondly, we will also be using random forests for improved supervised learning. This is a widely used bagging algorithm, which takes a decision tree and attempts to improve its stability and accuracy. This will mainly be useful for reducing variance and preventing overfitting, and will also serve as a way to evaluate the predictiveness of each input variable."
  },
  {
    "objectID": "decision_trees/regression/regression.html#introduction-to-decision-trees",
    "href": "decision_trees/regression/regression.html#introduction-to-decision-trees",
    "title": "Regression",
    "section": "",
    "text": "Decision Trees are a supervised learning technique that uses non-parametric methods for classification and regression. This differs from many disciplines of mathematical modeling, as non-parametric statistics do not make assumptions about the distribution of the sample’s population. Thus, regardless of the distribution, Decision Trees attempt to create models from the data simply by creating sequential sets of rules. These rules can be interpreted as sets of if-else statements, as we would understand them in programming. In this regard, Decision Trees follow the process of creating a conditions, assessing whether or not an observation follows that condition, and assigns an outcome based on the result. This can then be repeated iteratively to the resulting value when applying a different condition, thus creating a set of splits with different trajectories to resemble a tree diagram.\nAs mentioned above, Decision Trees can be categorized into two methods: classification and regression. Classification Decision Trees will be recapped on the Classification tab of this section.\n\n\nRegression trees are specifically used for when a target variable takes on continuous values. To do this, they attempt to estimate the local nature of the underlying function (i.e., how a particular variable impacts the target at a certain value or range of values), rather than the global shape of the data.\nTherefore, each condition will be a question of whether a record fits a value or a range of values for a particular variable, and each node is a predicted numerical output that will estimate the target based on a condition. Due to the discrete nature of decision trees and the fact that the target variable is continuous, this can result in large error, so applying error metrics is crucial.\nOne method that will be applied below is pruning, which is a very common way of simplifying trees. Doing this cuts down on the number of leaves by replacing excess nodes and their respective subtrees with singular leaves. This can significantly reduce the size of a tree, as well as improve performance in cases where accuracy of a training set deteriorates as overfitting begins to occur.\nSecondly, we will also be using random forests for improved supervised learning. This is a widely used bagging algorithm, which takes a decision tree and attempts to improve its stability and accuracy. This will mainly be useful for reducing variance and preventing overfitting, and will also serve as a way to evaluate the predictiveness of each input variable."
  },
  {
    "objectID": "decision_trees/regression/regression.html#regresssion-trees-for-record-data",
    "href": "decision_trees/regression/regression.html#regresssion-trees-for-record-data",
    "title": "Regression",
    "section": "Regresssion Trees for Record Data",
    "text": "Regresssion Trees for Record Data\n\nTarget Distribution\nThe record data to which we will apply regression Decision Trees to is the dataset of public transit data by city. In this dataset there are two target variables we will be looking at, which will each serve a significant purpose in determining how the public transit system in a city succeeds:\n\nTrips_per_capita: All public transportation trips (bus + train + ferry + …) divided by total metropolitan area population. Put simply, this is the relative usage of a public transit system. The distribution of this variable is visualized below:\n\n\n\n\nTrips_per_capita Boxplot\n\n\n\nCost_per_trip: The monetary value (in USD) that a city spends on its public transit system divided by the total number of trips. This value represents the cost effectiveness of the system, thus providing insights on its efficacy. The distribution of this variable is visualized below:\n\n\n\n\nCost_per_trip Boxplot\n\n\nThe input variables for both of these targets are the following:\n\nPopulation: The total metropolitan area population of the city\nArea: The total area in square miles of the city\nFare_per_trip: How much the customers spend in USD on average on each trip\nMiles_per_trip: The average length in miles of each trip\n\n\n\nApplying the Model and Pruning\nThe code for creating the initial regression tree is below, starting with Trips_per_capita as our target variable:\n\n\nCode\napta &lt;- read.csv(\"../../data/cleaned_data/apta_cities_cleaned.csv\")\nlibrary(tree)\nlibrary(rpart)\nlibrary(rattle)\nlibrary(visNetwork)\nset.seed(1)\ntrain = sample(1:nrow(apta), nrow(apta)/2)\napta.tree=tree(Trips_per_capita ~ Population + Area + Fare_per_trip + Miles_per_trip, apta, subset=train)\nsummary(apta.tree)\napta.tree2=rpart(Trips_per_capita ~ Population + Area + Fare_per_trip + Miles_per_trip, apta ,subset=train)\nfancyRpartPlot(apta.tree2)\n\n\n\n\n\nInitial Regression Tree\n\n\nThere are a few things notable about this initial tree. Firstly, there are very few nodes which indicates a low chance of overfitting, but a strong possibility of high variance. Secondly, we can take a look at which variables are prevalent in the conditions. It is notable that Fare_per_trip is not a determining factor in predicting the usage of a public transit system, while variables that are more inherent to a city’s characteristics are present. We can learn more via pruning and obtaining another tree:\n\n\nCode\ncv.apta &lt;- cv.tree(apta.tree)\nplot(cv.apta$size,cv.apta$dev,type='b')\nprune.apta=prune.tree(apta.tree,best=5)\nplot(prune.apta)\ntext(prune.apta,pretty=0)\nyhat=predict(apta.tree,newdata=apta[-train,])\napta.test=apta[-train,\"Trips_per_capita\"]\nplot(yhat,apta.test)\nabline(0,1)\n\n\n\n\n\nPruning via cv\n\n\n\n\n\nPruned Tree\n\n\nThis pruned tree tells a similar story to the original one. The tree is of similar size, and the same input variables are present.\n\n\n\nResults of Pruned Tree\n\n\nFrom these results, we can see that the tree was only partially effective in predicting Trips_per_capita. Especially where the predictions got large, there is quite a bit of error to account for.\nNext, we will turn our attention to the inital steps of regression trees with Cost_per_trip as the target variable:\n\n\nCode\ntrain2 &lt;- sample(1:nrow(apta), nrow(apta)/2)\napta.tree3=tree(Cost_per_trip ~ Population + Area + Fare_per_trip + Miles_per_trip, apta, subset=train2)\nsummary(apta.tree3)\napta.tree4=rpart(Cost_per_trip ~ Population + Area + Fare_per_trip + Miles_per_trip, apta ,subset=train2)\nfancyRpartPlot(apta.tree4)\n\n\n\n\n\nInitial Regression Tree\n\n\nThis tree is quite a bit more exhaustive and has an interesting variation of nodes. Firstly, it is apparent that the length of a trip positively impacts that trip’s cost, which could be expected. A trip’s fare and the size of a city also have an impact on how much a city spends on each ride, which is also worth noting.\n\n\nCode\ncv.apta2&lt;-cv.tree(apta.tree3)\nplot(cv.apta2$size,cv.apta2$dev,type='b')\nprune.apta2=prune.tree(apta.tree3,best=5)\nplot(prune.apta2)\ntext(prune.apta2,pretty=0)\nyhat2=predict(apta.tree3,newdata=apta[-train,])\napta.test2=apta[-train,\"Cost_per_trip\"]\nplot(yhat2,apta.test2)\nabline(0,1)\nmean((yhat2-apta.test2)^2)\n\n\n\n\n\nPruning via cv\n\n\n\n\n\nPruned Tree\n\n\nAfter pruning, we can see that the number of nodes and leaves has been reduced quite significantly. The most notable change, however, is that area is no longer present in any of the conditions. This tells a different story than the tree above, eliminating the predictiveness of a city’s size in determining the cost-effectiveness of its public transit system.\n\n\n\nResults of Pruned Tree\n\n\nFinally, from these results, it appears that this process did a bit better than the previous target variable. While there is still quite a bit of error to account for, there are certain leaves for which the predicted value seems to correlate with the actual value for cost per trip.\n\n\nRandom Forests\nBelow is the code and output for random forests, starting with Trips_per_capita as the target variable:\n\n\nCode\nlibrary(randomForest)\nset.seed(1)\nbag.apta=randomForest(Trips_per_capita ~ Population + Area + Fare_per_trip + Miles_per_trip, data=apta,subset=train, mtry=4, importance=TRUE)\nbag.apta\nyhat.bag = predict(bag.apta,newdata=apta[-train,])\nplot(yhat.bag2, apta.test)\nabline(0,1)\nmean((yhat.bag-apta.test)^2)\nbag.apta=randomForest(Trips_per_capita ~ Population + Area + Fare_per_trip + Miles_per_trip,data=apta,subset=train, mtry=4, ntree=25)\nyhat.bag = predict(bag.apta,newdata=apta[-train,])\nrf.apta=randomForest(Trips_per_capita ~ Population + Area + Fare_per_trip + Miles_per_trip, data=apta,subset=train,mtry=2,importance=TRUE)\nyhat.rf = predict(rf.apta,newdata=apta[-train,])\nmean((yhat.rf-apta.test)^2)\nimportance(rf.apta)\nvarImpPlot(rf.apta)\n\n\n\n\n\nPredicted Bagged Values\n\n\n\n\n\nImportance Plot\n\n\nThis importance plot tells us that Population and Area are the main predictors in determining Trips_per_capita. This result follows for both the proportion of MSE explained and the node purity. Thus, it is reasonable to infer that characteristics of a particular city are the primary determining factors of how much a public transit system is used.\n\n\nCode\nlibrary(randomForest)\nset.seed(1)\nbag.apta2=randomForest(Cost_per_trip ~ Population + Area + Fare_per_trip + Miles_per_trip, data=apta,subset=train2, mtry=4, importance=TRUE)\nbag.apta2\nyhat.bag2 = predict(bag.apta2,newdata=apta[-train2,])\nplot(yhat.bag2, apta.test2)\nabline(0,1)\nmean((yhat.bag2-apta.test2)^2)\nbag.apta=randomForest(Cost_per_trip ~ Population + Area + Fare_per_trip + Miles_per_trip,data=apta,subset=train2, mtry=4, ntree=25)\nyhat.bag = predict(bag.apta,newdata=apta[-train2,])\nrf.apta=randomForest(Cost_per_trip ~ Population + Area + Fare_per_trip + Miles_per_trip, data=apta,subset=train2,mtry=2,importance=TRUE)\nyhat.rf = predict(rf.apta,newdata=apta[-train2,])\nmean((yhat.rf-apta.test2)^2)\nimportance(rf.apta)\nvarImpPlot(rf.apta)\n\n\n\n\n\nPredicted Bagged Values\n\n\n\n\n\nImportance Plot\n\n\nThis importance plot tells us that Miles_per_trip decisively accounts for the majority of Mean Squared Error and also has the most node purity. This follows intuition, as we could expect that the length of a trip plays a big role in how much that trip costs."
  },
  {
    "objectID": "decision_trees/regression/regression.html#conclusions",
    "href": "decision_trees/regression/regression.html#conclusions",
    "title": "Regression",
    "section": "Conclusions",
    "text": "Conclusions\nWhen comparing these results to our data science question, it is important to think about what particular action items a city can take to improve their public transit system. Due to the presence of two target variables, we can analyze performance as a combination of two metrics.\nFirstly, the proportional volume of public transit usage is a great indicator of how much a city’s residence depend on those resources. From our analysis, it appears that the amount of ridership depends most heavily on the size of the city, with larger cities outperforming smaller cities in trips per capita.\nAs we will see in classification trees and through intuition, this is expected. Larger cities often have more robust public transit infrastructure, denser populations, and less reliance on travel by car. Unfortunately, it is then difficult to prescribe action items for a city, as success in this metric is largely dependent on the city’s underlying characteristics.\nSecondly, cost per trip tells us the financial viability of a public transit system. A city that offers more services per dollar is more likely to view that resource as necessary for its residents. Our results tell us that this is also largely a function of the city’s characteristics. A trip is likely to cost more if it services longer trips."
  },
  {
    "objectID": "introduction/introduction.html",
    "href": "introduction/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Large public transit networks have been a staple of large cities for over a century. However, in large part due to the ramifications of COVID-19, urban areas across the United States of America have seen significant drops in public transit usage. The graph below uses data from the American Public Transportation Association Quarterly Ridership Report1 to show this unprecedented drop and subsequent partial recovery. This will serve as a generalization and basis for the issue which this paper explores.\n\n\n\nTotal Public Transit Ridership in the U.S. Since 2010: Data from American Public Transportation Association Quarterly Ridership Report\n\n\nWhile the plot above shows that this phenomenon has slightly abated as cities have returned to a resemblance of their previous state, usage numbers still significantly lag behind those from before the pandemic. As large portions of state and municipal budgets go to the creation, improvement, and operation of public transit systems, many have started to question the efficacy of urban bus and train networks in the new post-COVID-19 era.\nThe potential consequences of this decline in usage are easy to see. Many believe this calls for decreased funding or elimination of unprofitable public transit, as money should be allocated towards areas where more people will benefit. On the other hand, the presence of affordable and reliable transportation is often seen as a public service, where monetary loss can be accepted for the good of a city and its residents. Ultimately, the extent to which this belief outweighs current and future struggles can be debated indefinitely. Thus, it is important for us to understand the causes of the recent decline and current recovery, what we can expect from public transit usage in the future, and how public transit impacts the city and its residents. The goal of this paper is to explore these topics and respond to the hypothesis that public transit systems still have efficacy because they remain vital staples of their city with great enough long-term demand to offset temporary financial losses.\n\n\n\n\nTo what extent does the public service of public transit offset financial losses?\nWhat are the primary reason for people to use public transit?\nWhat were the primary causes for the rapid decline in public transit usage?\nWhat are the primary causes for the slow recovery in public transit usage?\nTo what extent is the decline in public transit usage permanent?\nHow do recent trends in public transit usage differ between cities?\nHow do recent trends in public transit usage differ between modes of transportation?\nWhat political incentives exist regarding funding, eliminating, or expanding public transit?\nTo what extent do residents typically benefit from increased spending on public transit?\nWho is most affected by changes in public transit ridership and policy?\n\n\n\n\nTo properly answer the questions above, it is important to understand work done by other researchers. Initially, there are two academic publications that provide significant insight into public transit phenomena in 2020. Understanding the events and results of the decline in public transit usage will ultimately inform our understanding of how current events shape public behavior, the role of public transit in urban areas, and the extent to which we can predict a rebound in public transit usage.\n\n\n\nThis publication from September 2020 provides significant insight into what can be observed by studying mobility during the COVID-19 pandemic. Despite a specific focus on Poland, we are able to see how human behavior can be measured and how public transit systems are affected by current events. The paper notes that in addition to studying the affect of a pandemic on public transit, the opposite relationship can occur, where public transportation methods can negatively impact the mitigation of a pandemic. Ultimately, the paper aims to assess the relationships between public transit usage and COVID-19 cases, as well as the former with government stringency.\nIn its methodology, the researchers developed quantifiable metrics to determine government stringency (called Stringency Index) at various times by logging different events of lockdowns, restrictions, and warnings. This, along with already quantified data regarding the status of the pandemic across Poland, was measured alongside mobility metrics such as public transit usage. In the image below, we can see how a relationship was determined through the variables that had been set:\n\n\n\nMobility Changes and Stringency Index\n\n\nUltimately, researchers concluded through analysis of all regions of Poland that despite a relatively mild outbreak of the pandemic, “a combination of government lockdown and social fears of contracting and spreading COVID-19 has caused a substantial reduction in passengers’ public transport demand in Poland.” Meanwhile, a similar relationship between the status of the pandemic (i.e., total cases) and public transit usage. This offers compelling insight for our topic, as it enforces the need to compare different forces in why people may hesitate to use public transit. Additionally, the importance of political decisions are heavily weighed, which turned out to be a telling factor in determining human behavior.\n\n\n\nMuch like the previous article, this publication studied a decline in public transit ridership prior to any eventual rebound. Its data sources are primarily from a widely used transit application to measure changes in demand over time. To accomplish this, the researchers define three key parameters: “base value, the apparent minimal level of demand; cliff and base point, representing the initial date when decline in transit demand began and the final date when decline attenuated, respectively; and decay rate, representing the speed of the demand decline.” Using these metrics, they managed to determine that the impact of COVID-19 on public transit was uneven, often explained by differences in social status.\nBy studying several cities across the United States, this study identified demographic influences in how public transit ridership was affected by COVID-19. Communities with larger minority populations often saw higher base values and less significant declines in ridership, a relationship that was also present for populations that searched for “Coronavirus” less. These communities also correlated heavily with the proportion of essential workers. Ultimately, this indicates that demand for public transit is discretionary. People continue to use public transportation if their occupations and livelihood still necessitate its use.\nThis relates to our questions for the future because it indicates factors that impact people’s public transit usage, many of which are still changing today. In a world where “work-from-home” remains more prevalent than prior to the pandemic, it stands to reason that usage may not fully rebound until people feel it is necessary, not just convenient or inexpensive. Additionally, this publication highlights public transit as a critical infrastructure for underprivileged social groups, which is a necessary consideration when assessing its efficacy."
  },
  {
    "objectID": "introduction/introduction.html#abstract",
    "href": "introduction/introduction.html#abstract",
    "title": "Introduction",
    "section": "",
    "text": "Large public transit networks have been a staple of large cities for over a century. However, in large part due to the ramifications of COVID-19, urban areas across the United States of America have seen significant drops in public transit usage. The graph below uses data from the American Public Transportation Association Quarterly Ridership Report1 to show this unprecedented drop and subsequent partial recovery. This will serve as a generalization and basis for the issue which this paper explores.\n\n\n\nTotal Public Transit Ridership in the U.S. Since 2010: Data from American Public Transportation Association Quarterly Ridership Report\n\n\nWhile the plot above shows that this phenomenon has slightly abated as cities have returned to a resemblance of their previous state, usage numbers still significantly lag behind those from before the pandemic. As large portions of state and municipal budgets go to the creation, improvement, and operation of public transit systems, many have started to question the efficacy of urban bus and train networks in the new post-COVID-19 era.\nThe potential consequences of this decline in usage are easy to see. Many believe this calls for decreased funding or elimination of unprofitable public transit, as money should be allocated towards areas where more people will benefit. On the other hand, the presence of affordable and reliable transportation is often seen as a public service, where monetary loss can be accepted for the good of a city and its residents. Ultimately, the extent to which this belief outweighs current and future struggles can be debated indefinitely. Thus, it is important for us to understand the causes of the recent decline and current recovery, what we can expect from public transit usage in the future, and how public transit impacts the city and its residents. The goal of this paper is to explore these topics and respond to the hypothesis that public transit systems still have efficacy because they remain vital staples of their city with great enough long-term demand to offset temporary financial losses."
  },
  {
    "objectID": "introduction/introduction.html#questions-to-answer",
    "href": "introduction/introduction.html#questions-to-answer",
    "title": "Introduction",
    "section": "",
    "text": "To what extent does the public service of public transit offset financial losses?\nWhat are the primary reason for people to use public transit?\nWhat were the primary causes for the rapid decline in public transit usage?\nWhat are the primary causes for the slow recovery in public transit usage?\nTo what extent is the decline in public transit usage permanent?\nHow do recent trends in public transit usage differ between cities?\nHow do recent trends in public transit usage differ between modes of transportation?\nWhat political incentives exist regarding funding, eliminating, or expanding public transit?\nTo what extent do residents typically benefit from increased spending on public transit?\nWho is most affected by changes in public transit ridership and policy?"
  },
  {
    "objectID": "introduction/introduction.html#relevant-publications",
    "href": "introduction/introduction.html#relevant-publications",
    "title": "Introduction",
    "section": "",
    "text": "To properly answer the questions above, it is important to understand work done by other researchers. Initially, there are two academic publications that provide significant insight into public transit phenomena in 2020. Understanding the events and results of the decline in public transit usage will ultimately inform our understanding of how current events shape public behavior, the role of public transit in urban areas, and the extent to which we can predict a rebound in public transit usage.\n\n\nThis publication from September 2020 provides significant insight into what can be observed by studying mobility during the COVID-19 pandemic. Despite a specific focus on Poland, we are able to see how human behavior can be measured and how public transit systems are affected by current events. The paper notes that in addition to studying the affect of a pandemic on public transit, the opposite relationship can occur, where public transportation methods can negatively impact the mitigation of a pandemic. Ultimately, the paper aims to assess the relationships between public transit usage and COVID-19 cases, as well as the former with government stringency.\nIn its methodology, the researchers developed quantifiable metrics to determine government stringency (called Stringency Index) at various times by logging different events of lockdowns, restrictions, and warnings. This, along with already quantified data regarding the status of the pandemic across Poland, was measured alongside mobility metrics such as public transit usage. In the image below, we can see how a relationship was determined through the variables that had been set:\n\n\n\nMobility Changes and Stringency Index\n\n\nUltimately, researchers concluded through analysis of all regions of Poland that despite a relatively mild outbreak of the pandemic, “a combination of government lockdown and social fears of contracting and spreading COVID-19 has caused a substantial reduction in passengers’ public transport demand in Poland.” Meanwhile, a similar relationship between the status of the pandemic (i.e., total cases) and public transit usage. This offers compelling insight for our topic, as it enforces the need to compare different forces in why people may hesitate to use public transit. Additionally, the importance of political decisions are heavily weighed, which turned out to be a telling factor in determining human behavior.\n\n\n\nMuch like the previous article, this publication studied a decline in public transit ridership prior to any eventual rebound. Its data sources are primarily from a widely used transit application to measure changes in demand over time. To accomplish this, the researchers define three key parameters: “base value, the apparent minimal level of demand; cliff and base point, representing the initial date when decline in transit demand began and the final date when decline attenuated, respectively; and decay rate, representing the speed of the demand decline.” Using these metrics, they managed to determine that the impact of COVID-19 on public transit was uneven, often explained by differences in social status.\nBy studying several cities across the United States, this study identified demographic influences in how public transit ridership was affected by COVID-19. Communities with larger minority populations often saw higher base values and less significant declines in ridership, a relationship that was also present for populations that searched for “Coronavirus” less. These communities also correlated heavily with the proportion of essential workers. Ultimately, this indicates that demand for public transit is discretionary. People continue to use public transportation if their occupations and livelihood still necessitate its use.\nThis relates to our questions for the future because it indicates factors that impact people’s public transit usage, many of which are still changing today. In a world where “work-from-home” remains more prevalent than prior to the pandemic, it stands to reason that usage may not fully rebound until people feel it is necessary, not just convenient or inexpensive. Additionally, this publication highlights public transit as a critical infrastructure for underprivileged social groups, which is a necessary consideration when assessing its efficacy."
  },
  {
    "objectID": "introduction/introduction.html#footnotes",
    "href": "introduction/introduction.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“Quarterly and Annual Totals by Mode​​​,” American Public Transportation Association, https://www.apta.com/research-technical-resources/transit-statistics/ridership-report/ (accessed Oct. 5, 2023).↩︎\nM. Wielechowski, K. Czech, and Ł. Grzęda, “Decline in mobility: Public transport in Poland in the time of the COVID-19 pandemic,” Economies, vol. 8, no. 4, p. 78, 2020. doi:10.3390/economies8040078↩︎\nL. Liu, H. J. Miller, and J. Scheff, “The impacts of covid-19 pandemic on public transit demand in the United States,” PLOS ONE, vol. 15, no. 11, 2020. doi:10.1371/journal.pone.0242476↩︎"
  },
  {
    "objectID": "conclusions/conclusions.html",
    "href": "conclusions/conclusions.html",
    "title": "Conclusions",
    "section": "",
    "text": "Build out your website tab for “conclusions”"
  },
  {
    "objectID": "clustering/clustering.html",
    "href": "clustering/clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "For this section, we will be applying clustering analyis to both record and text datasets. Starting with the record dataset, our feature data \\(X\\) will be comprised of US Census data gathered by Integrated Public Use Microdata Series (IPUMS). 1 This dataset includes many reported variables regarding people, their location, and their household. An important aspect to note about this process is that while this dataset does contain valuable information on each person’s mode of transportation to work, which is ultimately the target variable of this analysis, clustering is an unsupervised learning method that is generally done without knowing a target variable or any relationships within the data. Therefore, this data will contain the following features, each of which can be important indicators of one’s lifestyle and how they might be impacted by public transit trends and phenomena:\n\nCity population (00s): The population of the city in which they reside (missing values or unincorporated cities will be dropped, as the person is less likely to have access to public transit)\nAge (years)\nTotal personal income (dollars)\n\nSecondly, clustering is a valuable tool for understanding text data and how language can be analyzed via numerical methods. The feature data for this process will be Yelp reviews for some of the most commonly used public transit systems in the US. Specifically, the top seven public transit systems from the Federal Transit Administration’s 2022 Ridership Report. These are:\n\nMetropolitan Transit Authority (New York City) 2\nLos Angeles County Metropolitan Transportation Authority 3\nChicago Transit Authority 4\nSoutheastern Pennsylvania Transportation Authority (Philadelphia) 5\nMassachusetts Bay Transportation Authority (Boston) 6\nWashington Metropolitan Area Transit Authority (Washington, D.C.) 7\nSan Francisco Bay Area Rapid Transit District 8\n\nThis data will be clustered based on the review text, then compared against the associated numerical ratings in order to gather insights on how the language that people use can be predictive of their overall sentiment or opinion on public transit."
  },
  {
    "objectID": "clustering/clustering.html#introduction",
    "href": "clustering/clustering.html#introduction",
    "title": "Clustering",
    "section": "",
    "text": "For this section, we will be applying clustering analyis to both record and text datasets. Starting with the record dataset, our feature data \\(X\\) will be comprised of US Census data gathered by Integrated Public Use Microdata Series (IPUMS). 1 This dataset includes many reported variables regarding people, their location, and their household. An important aspect to note about this process is that while this dataset does contain valuable information on each person’s mode of transportation to work, which is ultimately the target variable of this analysis, clustering is an unsupervised learning method that is generally done without knowing a target variable or any relationships within the data. Therefore, this data will contain the following features, each of which can be important indicators of one’s lifestyle and how they might be impacted by public transit trends and phenomena:\n\nCity population (00s): The population of the city in which they reside (missing values or unincorporated cities will be dropped, as the person is less likely to have access to public transit)\nAge (years)\nTotal personal income (dollars)\n\nSecondly, clustering is a valuable tool for understanding text data and how language can be analyzed via numerical methods. The feature data for this process will be Yelp reviews for some of the most commonly used public transit systems in the US. Specifically, the top seven public transit systems from the Federal Transit Administration’s 2022 Ridership Report. These are:\n\nMetropolitan Transit Authority (New York City) 2\nLos Angeles County Metropolitan Transportation Authority 3\nChicago Transit Authority 4\nSoutheastern Pennsylvania Transportation Authority (Philadelphia) 5\nMassachusetts Bay Transportation Authority (Boston) 6\nWashington Metropolitan Area Transit Authority (Washington, D.C.) 7\nSan Francisco Bay Area Rapid Transit District 8\n\nThis data will be clustered based on the review text, then compared against the associated numerical ratings in order to gather insights on how the language that people use can be predictive of their overall sentiment or opinion on public transit."
  },
  {
    "objectID": "clustering/clustering.html#theory",
    "href": "clustering/clustering.html#theory",
    "title": "Clustering",
    "section": "Theory",
    "text": "Theory\nThe goal of clustering is to find groups that convey similarity withing the data. This is generally done by assessing some distance metric between data points to determine the likelihood that they would belong in the same cluster. However, this can be done in several different ways. In this analysis, we will be applying K-Means, DBSCAN, and hierarchical clustering to our record data, and just K-Means to our text data. Thus, it is important to understand the similarities and differences between these methods, as well as model selection methods for making sense of the clustering.\n\nK-Means\nK-Means clustering is, in simplest terms, “centroid based cluster identification”. To perform this, a user will define number of \\(k\\) clusters to partition \\(n\\) observations into. Each cluster will have a centroid, which is essentially the mean of all of its data points. All observations will be placed in the cluster with the nearest mean to itself, which can be measured using several distance metrics, usually Euclidean distance. In practice, this results in partitions called Voronoi cells, which are tesselated regions around each observation that represent the space occupied by that observation (i.e. the space in which that observation is the closest data point).\nThis method minimizes variances (squared Euclidean distances) within clusters. The algorithm works by first randomly selecting a set of \\(k\\) centroids, which are used to initially place the observations in a cluster. There is then an iterative approach to optimize the location of each centroid until either the centroids stabilize in set locations, or if the iterations hit a user-defined cap. Ultimately, K-means tends to be useful because of its simplicity. While it often struggles with data that has clusters of unusual shpaes due to the circular nature of converging around a centroid, it is often very efficient in grouping data that follows its requirements. 9\n\n\nDBSCAN\nDensity-based spacial clustering of applications with noise (DBSCAN) is a non-parametric algorithm which groups points that are close to one another. This differs from K-means in that instead of searching for nearby centroids, for each observation we are looking for the nearest other observations. In practice, this means that each cluster is a high-density region of data points, while they are each separated by low-density regions of datapoints.\nThe usefulness of this method comes when irregularly-shaped clusters are present in the data. While searching for centroids generally results in spherical clusters, DBSCAN can identify clusters of all shapes and sizes, so long as those shapes represent continuous regions of high density. Additionally, when presented with noise, DBSCAN effectively filters out data points that do not coincide with others. An observation that is far away from any other will not be placed in a high-density cluster; instead, it will be identified as a point that does not have close neighbors, and may be left in its own cluster.\nThe algorithm follows the following steps: 10\n\nAn observation is arbitrarily picked as the starting points\nIf the number of observations within a specified distance exceeds a specified minimum number, those points will be considered a cluster\nRecursively, this process is done for each point in the cluster to expand the cluster\n\n\n\nHierarchical Clustering\nWhile the two methods outlined above are examples of partitional clutering (i.e. they group data into divisions that do not overlap), hierarchical clustering produces nested clusters, in which there can essentially be “clusters of clusters”. In this case, there is no assumed value of \\(k\\), as the algorithm creates clusters based on the organization of the data. This technique can be broken down into two types: Agglomerative and Divisive.\nIn Agglomerative clustering, each observation represents its own cluster. As observations (and subsequently clusters) are deemed to be similar, pairs of clusters get merged together. This can be thought of as a “bottom up” process, as one moves up the hierarchy for this technique.\nDivision is the “top down” alternative to this process. In this case, all observations start as one big cluster. Recursively, this cluster is split as observations are deemed dissimilar, until each observation is accounted for in its own cluster. These clusters are often visualized in a dendrogram.\n\n\nSilhouette Method\nFor this process, we will be using the Silhouette Method to evaluate the quality of clustering for each defined number of clusters. This process iterates over each data point and measures the extent to which that observation is more similar to its own cluster than other clusters. A score closer to 1 suggests well-separated clusters, meaning the observations are significantly more similar to their own cluster than to other clusters. Conversely, a score close to -1 suggests that points are closer to other clusters than their own, which denotes poor clustering. A score around 0 indicates that clusters overlap. The purpose of calculating this for each specified \\(k\\) is to allow us to choose the optimal number of clusters. The \\(k\\) that returns the highest silhouette score will allow us to have better-defined clusters."
  },
  {
    "objectID": "clustering/clustering.html#methods",
    "href": "clustering/clustering.html#methods",
    "title": "Clustering",
    "section": "Methods",
    "text": "Methods\n\nRecord Data\nTo properly execute clustering techniques, we must first remove categorical variables from the data.\n\n\nCode\nimport pandas as pd\nipums = pd.read_csv('../data/cleaned_data/commute_cleaned.csv')\nipums = ipums.drop(columns=['Unnamed: 0','sex','marital_status','race','hispanic','employment'])\nipums = ipums.dropna()\nipums.head()\n\n\n\n\n\n\n\n\n\ncity_population_00s\nage\nincome\ntransportation_type\ntransportation_time\n\n\n\n\n20273\n2881.0\n21\n10500.0\nPrivate Vehicle\n15\n\n\n20274\n2881.0\n21\n33000.0\nPrivate Vehicle\n15\n\n\n20286\n2881.0\n57\n103000.0\nWalk\n10\n\n\n20288\n2881.0\n19\n40000.0\nWalk\n15\n\n\n20290\n2881.0\n23\n42000.0\nWalk\n15\n\n\n\n\n\n\n\nIn order to cluster our record data, we will need to determine the optimal \\(k\\) value for the most effective results. Thus, the code below defines functions that do the following:\n\nPlot the data in the defined clusters, once a parameter is chosen:\n\n\n\nCode\nimport sklearn.cluster\nimport numpy as np\nimport matplotlib as plt\nfrom matplotlib.pyplot import subplots\ndef plot(X,color_vector):\n    fig, ax = subplots()\n    ax.scatter(X[:,0], X[:,1],c=color_vector, cmap=\"viridis\")\n    ax.set(xlabel='Feature-1 (x_1)', ylabel='Feature-2 (x_2)',\n    title='Cluster data')\n    ax.grid()\n    # fig.savefig(\"test.png\")\n    plt.pyplot.show()\n\n\n\nPlot the silhouette scores for each \\(k\\) and return the optimal value for \\(k\\):\n\n\n\nCode\nfrom sklearn.metrics import silhouette_score\nX = ipums.drop(columns=['transportation_type'])\n\ndef maximize_silhouette(X,algo=\"birch\",nmax=20,i_plot=False):\n\n    i_print=False\n    X=np.ascontiguousarray(X) \n\n    params=[]; sil_scores=[]\n    sil_max=-1000\n    for param in range(2,nmax+1):\n        if(algo==\"birch\"):\n            model = sklearn.cluster.Birch(n_clusters=param).fit(X)\n            labels=model.predict(X)\n\n        if(algo==\"ag\"):\n            model = sklearn.cluster.AgglomerativeClustering(n_clusters=param).fit(X)\n            labels=model.labels_\n\n        if(algo==\"dbscan\"):\n            model = sklearn.cluster.DBSCAN(eps=param).fit(X)\n            labels=model.labels_\n\n        if(algo==\"kmeans\"):\n            model = sklearn.cluster.KMeans(n_clusters=param).fit(X)\n            labels=model.predict(X)\n\n        sil_scores.append(silhouette_score(X,labels))\n        params.append(param)\n\n\n        if(i_print): print(param,sil_scores[-1])\n        \n        if(sil_scores[-1]&gt;sil_max):\n             opt_param=param\n             sil_max=sil_scores[-1]\n             opt_labels=labels\n\n    print(\"OPTIMAL PARAMETER =\",opt_param)\n\n    if(i_plot):\n        fig, ax = plt.pyplot.subplots()\n        ax.plot(params, sil_scores, \"-o\")  \n        ax.set(xlabel='Hyper-parameter', ylabel='Silhouette')\n        plt.pyplot.show()\n\n    return opt_labels\n\n\nIn order to run these functions, we will need to shorten the dataset significantly to a reasonable volume. Thus, the first step before clustering the data will be to create a variable X_short, which will randomly sample 1000 rows from the feature data \\(X\\). Next, we will run K-Means, Agglomerative, and Birch clustering algorithms to obtain the optimal value of \\(k\\) for each, as well as the optimal labels for each observational unit. This process is called hyper-parameter tuning.\nK-Means\n\n\nCode\nimport warnings\nwarnings.simplefilter('ignore', np.RankWarning)\nwarnings.simplefilter('ignore', np.ComplexWarning)\nwarnings.filterwarnings('ignore', \"Intel MKL ERROR\")\nX_short = X.sample(n=1000)\n# KMEANS\nopt_labels=maximize_silhouette(X_short,algo=\"kmeans\",nmax=15, i_plot=True)\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nOPTIMAL PARAMETER = 2\n\n\n\n\n\nAgglomerative Clustering\n\n\nCode\n# AGGLOMERATIVE CLUSTERING\nopt_labels=maximize_silhouette(X_short,algo=\"ag\",nmax=15, i_plot=True)\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nOPTIMAL PARAMETER = 2\n\n\n\n\n\nBirch\n\n\nCode\n# BIRCH\nopt_labels=maximize_silhouette(X_short,algo=\"birch\",nmax=15, i_plot=True)\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nOPTIMAL PARAMETER = 2\n\n\n\n\n\nFor each of these plots, the optimal parameter given is 2. Therefore, in the “Results” section below, that will be the defined \\(k\\) number of clusters for each process.\n\n\nText Data\n\n\nCode\nyelp = pd.read_csv('../data/cleaned_data/total_yelp.csv')\nyelp = yelp.drop(columns=['Unnamed: 0'])\nyelp.head()\n\n\n\n\n\n\n\n\n\nRating\nDate\nReview\n\n\n\n\n0\n5\nJul 26, 2023\nI had to compliment WMATA on the shuttle servi...\n\n\n1\n1\nOct 27, 2023\nSince when did metro close the doors to their ...\n\n\n2\n1\nSep 29, 2023\nSo many things wrong with wmata I can't even b...\n\n\n3\n5\nSep 23, 2023\nI WFH, and WMATA has been very helpful in my m...\n\n\n4\n4\nSep 18, 2022\nI took the metro while visiting DC. I began at...\n\n\n\n\n\n\n\nIn order to cluster text data, the reviews gathered from Yelp must be cleaned and tokenized using nltk in Python. The steps for this are as follows, with the code directly below:\n\nDownload stopwords from nltk\nDefine a list of stoplemmas\nIterate over each review in the dataset\nTokenize the words\nRemove stopwords\nRemove numbers\nReplace hyphens in hyphenated words with spaces\nRemove empty tokens and special characters\nLemmatize\nRemove stoplemmas\nRe-join the individual tokens in the sentence into a single string\nCreate new array with updated strings\n\nNote: Much of this code is repurposed from: https://jjacobs.me/dsan5000/463a01339cf0f456ba54a1849df50d1a22c247e3/writeups/clustering/DSAN5000_Clustering_Lab.html#finding-the-most-prominent-signal-via-clustering\n\n\nCode\nimport nltk\nnltk.download('punkt')\nnltk.download('wordnet')\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem.wordnet import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()\nfrom tqdm import tqdm\ntqdm.pandas()\nimport string\nfrom collections import Counter\ntoken_counter = Counter()\nfrom nltk.corpus import stopwords\ncustom_stoplemmas = [\n    'be',\n    'ir',\n    'll',\n    'nt',\n    'quot',\n    'rd',\n    's',\n    've'\n]\n\ndef remove_special_chars(token):\n  return token.translate(str.maketrans('', '', string.punctuation))\n\ndef remove_digits(token):\n  return ''.join([c for c in token if not c.isdigit()])\n\ndef clean_review(review_text):\n  review_cleaned = review_text.lower()\n  review_sents = sent_tokenize(review_cleaned)\n  clean_sents = []\n  for cur_sent in review_sents:\n    sent_tokens = word_tokenize(cur_sent)\n    sent_tokens_cleaned = [t for t in sent_tokens if t not in stopwords.words('english')]\n    sent_tokens_cleaned = [remove_digits(t) for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [t.replace(\"-\", \" \") for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [remove_special_chars(t) for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [t for t in sent_tokens_cleaned if len(t) &gt; 0]\n    sent_tokens_cleaned = [lemmatizer.lemmatize(t) for t in sent_tokens_cleaned]\n    sent_tokens_cleaned = [t for t in sent_tokens_cleaned if t not in custom_stoplemmas]\n    token_counter.update(sent_tokens_cleaned)\n    clean_sent = ' '.join(sent_tokens_cleaned)\n    clean_sents.append(clean_sent)\n  review_final = \". \".join(clean_sents)\n  return review_final\nyelp['Review_clean'] = yelp['Review'].progress_apply(clean_review)\n\n\n[nltk_data] Downloading package punkt to\n[nltk_data]     /Users/joshsweren/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package wordnet to\n[nltk_data]     /Users/joshsweren/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n100%|██████████| 2434/2434 [00:31&lt;00:00, 77.48it/s] \n\n\nNow that the text has been readied for analysis, we can use the CountVectorizer function from sklearn to vectorize the data.\n\n\nCode\nfrom sklearn.feature_extraction.text import CountVectorizer\ncorpus = yelp['Review_clean'].values\nmax_document_freq = 0.4\nmin_document_count = 6\ncv = CountVectorizer(max_df=max_document_freq, min_df=min_document_count)\nX_text = cv.fit_transform(corpus)\nX_text.shape\n\n\n(2434, 3044)\n\n\nThe following process uses an NMF model from sklearn to fit the vectorized text data into a defined number of topics. Through exploratory data analysis, it was determined that three topics (clusters) gave the most convincing results. Below we can see the most commonly appearing words in each topic. This is not a particularly useful visualization, as these words are quite general and tend to overlap, but it allows us to see the division of data that will be further visualized as clusters.\n\n\nCode\nfrom sklearn.decomposition import LatentDirichletAllocation, NMF\ndef plot_top_words(model, feature_names, n_top_words, title):\n    fig, axes = plt.pyplot.subplots(1, 3, figsize=(30, 15))\n    axes = axes.flatten()\n    for topic_idx, topic in enumerate(model.components_):\n        top_features_ind = topic.argsort()[-n_top_words:]\n        top_features = feature_names[top_features_ind]\n        weights = topic[top_features_ind]\n\n        ax = axes[topic_idx]\n        ax.barh(top_features, weights, height=0.7)\n        ax.set_title(f\"Topic {topic_idx + 1}\", fontdict={\"fontsize\": 30})\n        ax.tick_params(axis=\"both\", which=\"major\", labelsize=20)\n        for i in \"top right left\".split():\n            ax.spines[i].set_visible(False)\n        fig.suptitle(title, fontsize=40)\n\n    plt.pyplot.subplots_adjust(top=0.90, bottom=0.05, wspace=0.90, hspace=0.3)\n    plt.pyplot.show()\nn_top_words = 20\nnum_topics = 3\nnmf = NMF(\n    n_components=num_topics,\n    random_state=5000,\n    beta_loss=\"frobenius\",\n)\nnmf.fit(X_text)\nfeature_names = cv.get_feature_names_out()\nplot_top_words(nmf, feature_names, n_top_words, \"Topics in NMF model\")\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\n\n\n\n\nFinally, we will use TSNE from sklearn to assign clusters to each review:\n\n\nCode\nfrom sklearn.manifold import TSNE\nnmf_ng_components = nmf.components_\nW = nmf.transform(X_text)\nW_df = pd.DataFrame(W)\nW_df['cluster'] = W_df.idxmax(axis=1)\ntsne_model = TSNE(\n    init='random',\n    random_state=5000\n)\ntsne_embedding = tsne_model.fit_transform(W)\ntsne_df = pd.DataFrame(tsne_embedding, columns=['x','y'])\ntsne_df['cluster'] = W_df['cluster']\ntsne_df['review'] = yelp['Review']\ntsne_df.head()\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\n\n\n\n\n\n\n\n\nx\ny\ncluster\nreview\n\n\n\n\n0\n4.215911\n-47.979015\n0\nI had to compliment WMATA on the shuttle servi...\n\n\n1\n-0.916922\n-17.092419\n0\nSince when did metro close the doors to their ...\n\n\n2\n5.989328\n-12.396338\n0\nSo many things wrong with wmata I can't even b...\n\n\n3\n-0.281190\n-59.255077\n0\nI WFH, and WMATA has been very helpful in my m...\n\n\n4\n-0.605770\n-15.053738\n0\nI took the metro while visiting DC. I began at...\n\n\n\n\n\n\n\n\n\nCode\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(init=\"random\", n_clusters=3, n_init=4, random_state=5000)\nkmeans.fit(X_text)\ny_pred = kmeans.predict(X_text)\nprint(\"Data points in each cluster:\")\nprint(len(y_pred[y_pred==0]))\nprint(len(y_pred[y_pred==1]))\nprint(len(y_pred[y_pred==2]))\n\n\nData points in each cluster:\n288\n235\n1911"
  },
  {
    "objectID": "clustering/clustering.html#results",
    "href": "clustering/clustering.html#results",
    "title": "Clustering",
    "section": "Results",
    "text": "Results\n\nRecord Data\nK-Means\n\n\nCode\n#KMEANS\nmodel = sklearn.cluster.KMeans(n_clusters=2).fit(X_short.to_numpy())\nlabels=model.predict(X_short.to_numpy())\nplot(X_short.to_numpy(),labels)\n\n\n\n\n\nBirch\n\n\nCode\n# Birch\nmodel = sklearn.cluster.Birch(n_clusters=2).fit(X_short.to_numpy())\nlabels=model.predict(X_short.to_numpy())\nplot(X_short.to_numpy(),labels)\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\n\n\n\n\nAgglomerative Clustering\n\n\nCode\n# Agglomerative\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2).fit(X_short.to_numpy())\nlabels=model.labels_\nplot(X_short.to_numpy(),labels)\n\n\n\n\n\nThese results show that the record data was not particularly useful for clustering. As we can see via the plots above, the defined clusters do not line up very well with the data, so new insights are difficult to gather from this.\n\n\nText Data\n\n\nCode\ncentroids = kmeans.cluster_centers_\nfrom sklearn.metrics import pairwise_distances_argmin_min\nargmins, mins = pairwise_distances_argmin_min(centroids, X_text)\nargmin_0 = argmins[0]\nargmin_1 = argmins[1]\nyelp['y_pred'] = y_pred\npd.crosstab(yelp['Rating'], yelp['y_pred'])\n\n\n\n\n\n\n\n\ny_pred\n0\n1\n2\n\n\nRating\n\n\n\n\n\n\n\n1\n68\n78\n825\n\n\n2\n59\n41\n242\n\n\n3\n73\n45\n322\n\n\n4\n63\n54\n332\n\n\n5\n25\n17\n190\n\n\n\n\n\n\n\n\n\nCode\npd.crosstab(yelp['Rating'], yelp['y_pred'], normalize='all', margins=True)\n\n\n\n\n\n\n\n\ny_pred\n0\n1\n2\nAll\n\n\nRating\n\n\n\n\n\n\n\n\n1\n0.027938\n0.032046\n0.338948\n0.398932\n\n\n2\n0.024240\n0.016845\n0.099425\n0.140509\n\n\n3\n0.029992\n0.018488\n0.132293\n0.180772\n\n\n4\n0.025883\n0.022186\n0.136401\n0.184470\n\n\n5\n0.010271\n0.006984\n0.078061\n0.095316\n\n\nAll\n0.118324\n0.096549\n0.785127\n1.000000\n\n\n\n\n\n\n\n\n\nCode\nimport seaborn as sns\ntsne_sample_size = 300\ntsne_sample_df = tsne_df.sample(tsne_sample_size, random_state=5000)\nsns.scatterplot(tsne_sample_df, x='x', y='y', hue='cluster', palette=sns.color_palette(\"tab10\"))\n\n\n/var/folders/z5/l6g0391s0qg3vsbnvl7y81n80000gn/T/ipykernel_9854/1050391010.py:4: UserWarning: The palette list has more values (10) than needed (3), which may not be intended.\n  sns.scatterplot(tsne_sample_df, x='x', y='y', hue='cluster', palette=sns.color_palette(\"tab10\"))\n\n\n&lt;Axes: xlabel='x', ylabel='y'&gt;\n\n\n\n\n\n\n\nCode\nimport textwrap\nmywrap = lambda x: textwrap.wrap(x, width=60)\ntsne_sample_df['review'] = tsne_sample_df['review'].apply(lambda x: x if type(x) == str else '')\ntsne_sample_df['review_wrap'] = tsne_sample_df['review'].apply(lambda x: '&lt;br&gt;'.join(mywrap(x)))\nimport plotly.express as px\nreview_fig = px.scatter(tsne_sample_df, x='x', y='y', color='cluster',\n                        hover_data=['review_wrap'], template='simple_white')\nreview_fig.update(layout_coloraxis_showscale=False)\nreview_fig.update_traces(marker=dict(size=12),selector=dict(mode='markers'))\nreview_fig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nThese visualizations show that clustering was illustrative for the text data. The clusters appear to be well-aligned with the data, and this allows us to gather significant insights on the reviews."
  },
  {
    "objectID": "clustering/clustering.html#conclusions",
    "href": "clustering/clustering.html#conclusions",
    "title": "Clustering",
    "section": "Conclusions",
    "text": "Conclusions\nIn summation, it is clear that text data from Yelp reviews can effectively be partitioned into clusters using the K-means method. This is significant because it allows us to categorize reviews into groups to better understand how people are discussing the most used public transit systems in the US. By doing this, we can make inferences on how and why public transit affects its respecitive cities and the corresponding population, which can be useful in explaining usage trends."
  },
  {
    "objectID": "clustering/clustering.html#footnotes",
    "href": "clustering/clustering.html#footnotes",
    "title": "Clustering",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSteven Ruggles, Sarah Flood, Matthew Sobek, Danika Brockman, Grace Cooper, Stephanie Richards, and Megan Schouweiler. IPUMS USA: Version 13.0 [dataset]. Minneapolis, MN: IPUMS, 2023. https://doi.org/10.18128/D010.V13.0↩︎\n“Metropolitan Transportation Authority - New York, NY,” Yelp, https://www.yelp.com/biz/metropolitan-transportation-authority-new-york-6 (accessed Nov. 14, 2023).↩︎\n“Metro Los Angeles - Los Angeles, CA,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 14, 2023).↩︎\n“Chicago Transit Authority - Chicago, IL,” Yelp, https://www.yelp.com/biz/metro-los-angeles-los-angeles (accessed Nov. 14, 2023).↩︎\n“Septa - Philadelphia, PA,” Yelp, https://www.yelp.com/biz/septa-philadelphia-7 (accessed Nov. 14, 2023).↩︎\n“Massachusetts Bay Transportation Authority - Boston, MA,” Yelp, https://www.yelp.com/biz/massachusetts-bay-transportation-authority-boston (accessed Nov. 14, 2023).↩︎\n“WMATA - Washington, DC, DC,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 2, 2023).↩︎\n“Bart - Bay Area Rapid Transit - Oakland, CA,” Yelp, https://www.yelp.com/biz/bart-bay-area-rapid-transit-oakland-2 (accessed Nov. 2, 2023).↩︎\nE. E. (LEDU), “Understanding K-means clustering in machine learning,” Medium, https://towardsdatascience.com/understanding-k-means-clustering-in-machine-learning-6a6e67336aa1 (accessed Nov. 14, 2023).↩︎\nN. S. Chauhan, “DBSCAN clustering algorithm in machine learning,” KDnuggets, https://www.kdnuggets.com/2020/04/dbscan-clustering-algorithm-machine-learning.html (accessed Nov. 14, 2023).↩︎"
  },
  {
    "objectID": "code/code.html",
    "href": "code/code.html",
    "title": "Code",
    "section": "",
    "text": "Link to Github repository"
  },
  {
    "objectID": "dimensionality_reduction/dimensionality_reduction.html",
    "href": "dimensionality_reduction/dimensionality_reduction.html",
    "title": "Dimensionality Reduction",
    "section": "",
    "text": "In this section, we will be using dimensionality reduction techniques to gain insights on public transit data for major US cities. The dataset for this comes from the American Public Transit Association Ridership Report, which contains details about public transit ridership from 2022. 1\nWhile this dataset does contain some information on the volume of ridership, unsupervised learning is generally done without a target variable or known relationships within the data. Thus, the features of this dataset are city population, city area (square miles), average cost per trip (dollars), average fare per trip (dollars), and average miles per trip, where the observation unit for each record is an individual city. In practice, all of these features could be factors in understanding the health of a public transit system, as they all either provide information on the city itself, the conditions for the riders, or the cost for the city. Thus, the objective of dimensionality reduction is to discover things about these features and how they interact with one another.\nTo do dimensionality reduction, there are two common methods: Principal Component Analysis (PCA) and T-distributed Stochastic Neighbor Embedding (TSNE). Both will be applied to this dataset. We will be using the following Python libraries to accomplish these:\n\nnumpy for obtaining eigenvalues and eigenvectors\nsklearn for implementing PCA and TSNE\nmatplotlib and seaborn for visualizations"
  },
  {
    "objectID": "dimensionality_reduction/dimensionality_reduction.html#objectives",
    "href": "dimensionality_reduction/dimensionality_reduction.html#objectives",
    "title": "Dimensionality Reduction",
    "section": "",
    "text": "In this section, we will be using dimensionality reduction techniques to gain insights on public transit data for major US cities. The dataset for this comes from the American Public Transit Association Ridership Report, which contains details about public transit ridership from 2022. 1\nWhile this dataset does contain some information on the volume of ridership, unsupervised learning is generally done without a target variable or known relationships within the data. Thus, the features of this dataset are city population, city area (square miles), average cost per trip (dollars), average fare per trip (dollars), and average miles per trip, where the observation unit for each record is an individual city. In practice, all of these features could be factors in understanding the health of a public transit system, as they all either provide information on the city itself, the conditions for the riders, or the cost for the city. Thus, the objective of dimensionality reduction is to discover things about these features and how they interact with one another.\nTo do dimensionality reduction, there are two common methods: Principal Component Analysis (PCA) and T-distributed Stochastic Neighbor Embedding (TSNE). Both will be applied to this dataset. We will be using the following Python libraries to accomplish these:\n\nnumpy for obtaining eigenvalues and eigenvectors\nsklearn for implementing PCA and TSNE\nmatplotlib and seaborn for visualizations"
  },
  {
    "objectID": "dimensionality_reduction/dimensionality_reduction.html#implementation",
    "href": "dimensionality_reduction/dimensionality_reduction.html#implementation",
    "title": "Dimensionality Reduction",
    "section": "Implementation",
    "text": "Implementation\n\nDimensionality Reduction with PCA\n\n\nCode\nimport pandas as pd\ncities = pd.read_csv('../data/cleaned_data/apta_cities_cleaned.csv')\ncities = cities.drop(columns=['Unnamed: 0'])\ncities.head()\n\n\n\n\n\n\n\n\n\nCity\nPopulation\nArea\nCost_per_trip\nFare_per_trip\nMiles_per_trip\nTotal_trips\nTrips_per_capita\n\n\n\n\n0\nSeattle--Tacoma, WA\n3544011\n982.52\n13.906032\n1.570667\n5.786344\n130093841\n36.708080\n\n\n1\nSpokane, WA\n447279\n171.67\n13.433827\n0.988308\n4.772569\n6995911\n15.641045\n\n\n2\nYakima, WA\n133145\n55.77\n19.720093\n1.112531\n5.179168\n513484\n3.856577\n\n\n3\nEugene, OR\n270179\n73.49\n10.851494\n2.753356\n3.684118\n5296214\n19.602612\n\n\n4\nPortland, OR--WA\n2104238\n519.30\n10.804361\n1.025659\n4.011388\n56312874\n26.761647\n\n\n\n\n\n\n\nA crucial step for PCA is first obtaining eigenvalues and eigenvectors to figure out the properties of the feature matrix. This process is printed below.\n\n\nCode\nimport json\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nX = cities.drop(columns=['City']).to_numpy()\n\nprint('NUMERIC MEAN:\\n',np.mean(X,axis=0))\nprint(\"X SHAPE\",X.shape)\nprint(\"NUMERIC COV:\")\nprint(np.cov(X.T))\n\nfrom numpy import linalg as LA\nw, v1 = LA.eig(np.cov(X.T))\nprint(\"\\nCOV EIGENVALUES:\",w)\nprint(\"COV EIGENVECTORS (across rows):\")\nprint(v1.T)\n\n\nNUMERIC MEAN:\n [7.63817374e+05 2.54954371e+02 1.62164796e+01 1.69764181e+00\n 6.02033451e+00 2.03019959e+07 9.62142228e+00]\nX SHAPE (286, 7)\nNUMERIC COV:\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n[[ 3.00348049e+12  6.21976504e+08 -2.68509287e+06 -2.80714130e+05\n  -3.74964286e+05  2.24741175e+14  1.29984354e+07]\n [ 6.21976504e+08  1.60662563e+05 -7.09356971e+02 -8.34065149e+01\n  -1.18548286e+02  3.87177727e+10  2.29845351e+03]\n [-2.68509287e+06 -7.09356971e+02  1.12521769e+02  1.14344019e+01\n   1.54309551e+01 -1.51824020e+08 -4.69434589e+01]\n [-2.80714130e+05 -8.34065149e+01  1.14344019e+01  1.07182685e+01\n   6.17463373e+00 -4.36561531e+06 -2.83807355e+00]\n [-3.74964286e+05 -1.18548286e+02  1.54309551e+01  6.17463373e+00\n   2.61947556e+01 -1.78488703e+07 -5.91059175e+00]\n [ 2.24741175e+14  3.87177727e+10 -1.51824020e+08 -4.36561531e+06\n  -1.78488703e+07  2.85052428e+16  1.49479496e+09]\n [ 1.29984354e+07  2.29845351e+03 -4.69434589e+01 -2.83807355e+00\n  -5.91059175e+00  1.49479496e+09  1.65428342e+02]]\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\nCOV EIGENVALUES: [2.85070148e+16 1.23149854e+12 2.66254943e+04 1.39995139e+02\n 5.92802397e+01 8.14460157e+00 2.44793107e+01]\nCOV EIGENVECTORS (across rows):\n[[-7.88430047e-03 -1.35831385e-06  5.32642483e-09  1.53214669e-10\n   6.26206285e-10 -9.99968918e-01 -5.24380050e-08]\n [ 9.99968885e-01  2.57162006e-04 -1.20827045e-06 -1.99988539e-07\n  -1.90196564e-07 -7.88430056e-03  9.84669318e-07]\n [ 2.57165690e-04 -9.99987334e-01  4.54144922e-03  5.33265824e-04\n   1.28310685e-03 -6.69356967e-07  1.64600913e-03]\n [-8.27843413e-07 -2.91942735e-03 -8.03111034e-01 -8.55421446e-02\n  -1.33834128e-01 -2.39959801e-08  5.74260491e-01]\n [ 1.14210098e-06 -4.07870902e-03 -5.48463614e-01 -1.02974170e-01\n  -1.47054608e-01  3.63317166e-08 -8.16665348e-01]\n [-1.27488408e-07  2.07273385e-04  7.32435013e-02 -9.59322603e-01\n   2.71686187e-01 -6.13010609e-11  2.28496311e-02]\n [-5.09559302e-08  2.50913689e-04 -2.20941387e-01  2.48553256e-01\n   9.41620060e-01  2.26566582e-09 -5.25145905e-02]]\n\n\nUpon obtaining the properties of our dataset, we can now use sklearn to implement PCA. The steps for this are as follows:\n\nNormalize the feature matrix using the StandardScalar() function\nSort the eigenvectors in order to prioritize principal components\nFind the cumulative sum of the principal components to find the proportion of the variance that can be explained by each number of features\nPlot this cumulative distribution\n\nNote: Some of this code is repurposed from https://www.geeksforgeeks.org/reduce-data-dimentionality-using-pca-python/ 2\n\n\nCode\nfrom sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(X)\ncov = (X.T @ X) / (X.shape[0] - 1)\nw, v1 = np.linalg.eig(cov)\n\nidx = np.argsort(w, axis=0)[::-1]\nsorted_eig_vectors = v1[:, idx]\n\ncumsum = np.cumsum(w[idx]) / np.sum(w[idx])\nxint = range(1, len(cumsum) + 1)\nplt.plot(xint, cumsum)\n\nplt.xlabel(\"Number of components\")\nplt.ylabel(\"Cumulative explained variance\")\nplt.xticks(xint)\nplt.xlim(1, 5, 1)\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n\n\n/var/folders/z5/l6g0391s0qg3vsbnvl7y81n80000gn/T/ipykernel_81423/3215643524.py:17: MatplotlibDeprecationWarning: Passing the emit parameter of set_xlim() positionally is deprecated since Matplotlib 3.6; the parameter will become keyword-only two minor releases later.\n  plt.xlim(1, 5, 1)\n\n\n(1.0, 5.0)\n\n\n\n\n\nFrom the plot above, we can see that greater than 95% of the cumulative explained variance is covered by 4 components. Therefore, it is reasonable to select that as the number of principal components. A good way to check the efficacy of this is to plot the covariance using seaborn from before and after PCA. Below is the covariance matrix of the feature dataset, which clearly shows a significant amount of covariance between a few of the variables.\n\n\nCode\nimport seaborn as sns\nX_df = pd.DataFrame(X).rename(columns={0: 'Population', 1: 'Area', 2: 'Cost_per_trip', 3: 'Fare_per_trip', 4: 'Miles_per_trip'})\nsns.heatmap(X_df.corr())\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\nCode\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=4)\npca.fit(X)\ndata_pca = pca.transform(X)\ndata_pca = pd.DataFrame(data_pca,columns=['PC1','PC2','PC3','PC4'])\ndata_pca.head()\n\n\n\n\n\n\n\n\n\nPC1\nPC2\nPC3\nPC4\n\n\n\n\n0\n3.033796\n0.350153\n0.122935\n0.019467\n\n\n1\n0.070137\n-0.474524\n0.321328\n-0.191796\n\n\n2\n-0.723213\n-0.152967\n-0.292844\n-0.111154\n\n\n3\n0.051012\n-0.449029\n0.788093\n-0.746024\n\n\n4\n1.584307\n-0.407123\n0.325299\n-0.194906\n\n\n\n\n\n\n\nAfter applying PCA, below is another heatmap showing the covariance between principal components, which greatly highlights the usefulness of this process. There is essentially no covariance between principal components, indicating that the 4 component selection was effective in summarizing data.\n\n\nCode\nsns.heatmap(data_pca.corr())\n\n\n&lt;Axes: &gt;\n\n\n\n\n\nFinally, below is a plot to visualize the data after selecting principal components.\n\n\nCode\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n%matplotlib widget\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(data_pca['PC2'],data_pca['PC3'],data_pca['PC4'], c=data_pca['PC1'])\nax.set_title(\"3D Plot of Principal Components\")\nax.set_xlabel('PC2')\nax.set_ylabel('PC3')\nax.set_zlabel('PC4')\nplt.show()\n\n\n\n\n\n\n\nDimensionality Reduction with TSNE\nFor implementing TSNE, we will once again be using sklearn. The TSNE() function unfortunately limits to three components, so this will mainly be used for parameter tuning to analyze different perplexities and how they affect our visualizations. The results of a couple of these implementations are below:\n\n\nCode\nfrom sklearn.manifold import TSNE\nX_embedded = TSNE(n_components=3, learning_rate='auto',init='random', perplexity=1).fit_transform(X)\n\n# EXPLORE RESULTS\nprint(\"RESULTS\") \nprint(\"shape : \",X_embedded.shape)\nprint(\"First few points : \\n\",X_embedded[0:4,:])\n\n# PLOT \nplt.scatter(X_embedded[:,0],X_embedded[:,1], alpha=0.5)\nplt.show()\n\n\nRESULTS\nshape :  (286, 3)\nFirst few points : \n [[  1.4826158   8.286032    4.584907 ]\n [ 11.727755   -5.2766175 -22.360485 ]\n [  5.0308733   5.835106  -26.438314 ]\n [  3.2732215  -2.770161    4.2295136]]\n\n\n\n\n\n\n\nCode\nX_embedded = TSNE(n_components=3, learning_rate='auto',init='random', perplexity=10).fit_transform(X)\n\n# EXPLORE RESULTS\nprint(\"RESULTS\") \nprint(\"shape : \",X_embedded.shape)\nprint(\"First few points : \\n\",X_embedded[0:4,:])\n\n\nRESULTS\nshape :  (286, 3)\nFirst few points : \n [[ 7.439387    7.215633    3.3639798 ]\n [ 0.01349061  5.4039626  -0.5400352 ]\n [-2.5031161  -4.7561264  -3.151865  ]\n [ 0.34158447  7.827049   -3.8418515 ]]\n\n\n\n\nCode\n# PLOT \nplt.scatter(X_embedded[:,0],X_embedded[:,1], alpha=0.5)\nplt.show()"
  },
  {
    "objectID": "dimensionality_reduction/dimensionality_reduction.html#evaluation",
    "href": "dimensionality_reduction/dimensionality_reduction.html#evaluation",
    "title": "Dimensionality Reduction",
    "section": "Evaluation",
    "text": "Evaluation\nUltimately, for this application, PCA proved to be a more useful process for understanding relationships within the feature matrix of our data. In general, PCA is ideal for preserving variance in the data, while TSNE preserves relationships more effectively. The crucial difference between the two is that PCA is a linear technique while TSNE is non-linear. For a dataset like this one, where ordering of data points is not a factor, the features were separable from one another, and the initial dimensionality is quite low, PCA is likely to be more effective."
  },
  {
    "objectID": "dimensionality_reduction/dimensionality_reduction.html#footnotes",
    "href": "dimensionality_reduction/dimensionality_reduction.html#footnotes",
    "title": "Dimensionality Reduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“Raw monthly ridership (no adjustments or estimates),” Raw Monthly Ridership (No Adjustments or Estimates) | FTA, https://www.transit.dot.gov/ntd/data-product/monthly-module-raw-data-release (accessed Nov. 14, 2023).↩︎\n“Reduce data dimensionality using PCA - Python,” GeeksforGeeks, https://www.geeksforgeeks.org/reduce-data-dimentionality-using-pca-python/ (accessed Nov. 14, 2023).↩︎"
  },
  {
    "objectID": "naive_bayes/naive_bayes.html",
    "href": "naive_bayes/naive_bayes.html",
    "title": "Naive Bayes",
    "section": "",
    "text": "Naive Bayes classification is a group of supervised learning algorithms which use Bayes’ theorem as their foundation. The “naive” aspect of these algorithms is the assumption that every pair of features are conditionally independent. 1 This can be better understood via the Bayes’ Theorem formula and how it applies in Naive Bayes. Given an output variable \\(y\\) and several feature variables \\(x_i\\), Bayes’ Theorem posits the following:\n\\(P\\left(y | x_1, \\ldots, x_n\\right)=\\frac{P(y) P\\left(x_1, \\ldots, x_n | y\\right)}{P\\left(x_1, \\ldots, x_n\\right)}\\)\nThe assumption that all feature variables are conditionally independent can be represented with the formula\n\\(P\\left(x_i \\mid y, x_1, \\ldots, x_{i-1}, x_{i+1}, \\ldots, x_n\\right)=P\\left(x_i \\mid y\\right)\\)\nwhich essentially states that the values of each \\(x_i\\) depend solely on \\(y\\), not the values from any other feature variable. Thus, we can substitute the products of all conditional probabilities into Bayes’ Theorem to represent the relationship as\n\\(P\\left(y \\mid x_1, \\ldots, x_n\\right)=\\frac{P(y) \\prod_{i=1}^n P\\left(x_i \\mid y\\right)}{P\\left(x_1, \\ldots, x_n\\right)}\\).\nUsing this foundation, Naive Bayes classification algorithms attempt to establish classifiers for a dataset by considering values for each feature and assigning probabilities that it belongs in a certain class of the specified output variable. To do this, the algorithm will first take in data from a test dataset. When executing Naive Bayes classification, it is generally recommended to partition cleaned data such that 80% of it belongs in the test dataset. The algorithm will iterate over the feature variables and observe the output, ultimately creating a model for the extents to which the feature variables predict the output classifications.\nDue to the foundation being on Bayes’ Theorem, these methods are probabilistic in nature. That is, rather than being able to decisively classify new data, the algorithms work based on conditional probabilities that records belong to a particular class.\nDiscerning when to use the different variants of Naive Bayes classification is crucial for obtaining meaningful results. Firstly, Gaussian Naive Bayes (GNB) assumes that the feature variables follow a normal distribution. Thus, if we have data that we know comes from a normally distributed population, we can use the appropriate likelihood function for parameter estimation. The same applies for other methods of Naive Bayes classification. Other popular algorithms include Multinomial Naive Bayes, Bernoulli Naive Bayes, Categorical Naive Bayes, and others. Essentially, the presumed distribution of the feature variables can be leveraged to give an appropriate likelihood function, which aids in estimating parameters.\n\n\nFor the purposes of our analysis, Naive Bayes can be used to analyze both record and text data. Firstly, the record data we will be using is the Census data which contains survey responses on various demographic features. The purpose of this will be to apply the Categorical Naive Bayes algorithm to features such as sex, race, and marital status to fit a model with a respondant’s method of transportation to commute to work as the output variable. This will allow us to gain insights on which types of people are most affected by changes in public transit policy and service, providing valuable context for how a city’s conditions can impact its residents.\nSecondly, the labeled text data that we will use is the combined dataset of Yelp reviews for WMATA and BART. These revies contain textual responses with accompanying numerical ratings (1-5 stars). Thus, the text will be considered the feature set for Multinomial Naive Bayes, with the ratings deemed the output, as it labels the review with a scale of satisfaction or dissatisfaction with a service. The purpose of this is to analyze public sentiment regarding public transit systems and how that may affect usage or responses to potential policy changes."
  },
  {
    "objectID": "naive_bayes/naive_bayes.html#introduction-to-naive-bayes",
    "href": "naive_bayes/naive_bayes.html#introduction-to-naive-bayes",
    "title": "Naive Bayes",
    "section": "",
    "text": "Naive Bayes classification is a group of supervised learning algorithms which use Bayes’ theorem as their foundation. The “naive” aspect of these algorithms is the assumption that every pair of features are conditionally independent. 1 This can be better understood via the Bayes’ Theorem formula and how it applies in Naive Bayes. Given an output variable \\(y\\) and several feature variables \\(x_i\\), Bayes’ Theorem posits the following:\n\\(P\\left(y | x_1, \\ldots, x_n\\right)=\\frac{P(y) P\\left(x_1, \\ldots, x_n | y\\right)}{P\\left(x_1, \\ldots, x_n\\right)}\\)\nThe assumption that all feature variables are conditionally independent can be represented with the formula\n\\(P\\left(x_i \\mid y, x_1, \\ldots, x_{i-1}, x_{i+1}, \\ldots, x_n\\right)=P\\left(x_i \\mid y\\right)\\)\nwhich essentially states that the values of each \\(x_i\\) depend solely on \\(y\\), not the values from any other feature variable. Thus, we can substitute the products of all conditional probabilities into Bayes’ Theorem to represent the relationship as\n\\(P\\left(y \\mid x_1, \\ldots, x_n\\right)=\\frac{P(y) \\prod_{i=1}^n P\\left(x_i \\mid y\\right)}{P\\left(x_1, \\ldots, x_n\\right)}\\).\nUsing this foundation, Naive Bayes classification algorithms attempt to establish classifiers for a dataset by considering values for each feature and assigning probabilities that it belongs in a certain class of the specified output variable. To do this, the algorithm will first take in data from a test dataset. When executing Naive Bayes classification, it is generally recommended to partition cleaned data such that 80% of it belongs in the test dataset. The algorithm will iterate over the feature variables and observe the output, ultimately creating a model for the extents to which the feature variables predict the output classifications.\nDue to the foundation being on Bayes’ Theorem, these methods are probabilistic in nature. That is, rather than being able to decisively classify new data, the algorithms work based on conditional probabilities that records belong to a particular class.\nDiscerning when to use the different variants of Naive Bayes classification is crucial for obtaining meaningful results. Firstly, Gaussian Naive Bayes (GNB) assumes that the feature variables follow a normal distribution. Thus, if we have data that we know comes from a normally distributed population, we can use the appropriate likelihood function for parameter estimation. The same applies for other methods of Naive Bayes classification. Other popular algorithms include Multinomial Naive Bayes, Bernoulli Naive Bayes, Categorical Naive Bayes, and others. Essentially, the presumed distribution of the feature variables can be leveraged to give an appropriate likelihood function, which aids in estimating parameters.\n\n\nFor the purposes of our analysis, Naive Bayes can be used to analyze both record and text data. Firstly, the record data we will be using is the Census data which contains survey responses on various demographic features. The purpose of this will be to apply the Categorical Naive Bayes algorithm to features such as sex, race, and marital status to fit a model with a respondant’s method of transportation to commute to work as the output variable. This will allow us to gain insights on which types of people are most affected by changes in public transit policy and service, providing valuable context for how a city’s conditions can impact its residents.\nSecondly, the labeled text data that we will use is the combined dataset of Yelp reviews for WMATA and BART. These revies contain textual responses with accompanying numerical ratings (1-5 stars). Thus, the text will be considered the feature set for Multinomial Naive Bayes, with the ratings deemed the output, as it labels the review with a scale of satisfaction or dissatisfaction with a service. The purpose of this is to analyze public sentiment regarding public transit systems and how that may affect usage or responses to potential policy changes."
  },
  {
    "objectID": "naive_bayes/naive_bayes.html#preparing-data-for-naive-bayes",
    "href": "naive_bayes/naive_bayes.html#preparing-data-for-naive-bayes",
    "title": "Naive Bayes",
    "section": "Preparing Data for Naive Bayes",
    "text": "Preparing Data for Naive Bayes\n\nPreparing Record Data\nTo prepare this data, the first step is to filter out columns that will not be fit in the Categorical Naive Bayes algorithm.\n\n\nCode\nfrom codecs import ignore_errors\nimport comm\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nimport shutil\n\ncommute=pd.read_csv(\"../data/cleaned_data/commute_cleaned.csv\")\ncommute = commute.drop(columns=['Unnamed: 0','age','income','city_population_00s','transportation_time'])\ncommute['transportation_type'].value_counts()\n\n\ntransportation_type\nPrivate Vehicle    1088363\nWork From Home      269004\nWalk                 36364\nPublic Transit       33144\nOther                16077\nBicycle               5869\nName: count, dtype: int64\n\n\nAs we can see from the distribution of our target variable, transportation_type, this data is very unbalanced. There are significantly more respondents who reported that their primary method of transportation for commuting to work is via Private Vehicle than any other, and the Work From Home group is also over-represented. In cases like this, it is common practice to over- or under-sample from certain groups to balance out the dataset. Without this practice, any supervised learning algorithm will generally predict the over-represented group to reduce the probability of inaccuracies. Therefore, we will under-sample from the two largest groups to bring them within 1,000 responses of the next-most represented group. This can be done via random sample to ensure the data isn’t tampered with too much.\n\n\nCode\ncommute = commute.drop(commute[commute['transportation_type']==\"Private Vehicle\"].sample(n=1052000).index)\ncommute = commute.drop(commute[commute['transportation_type']==\"Work From Home\"].sample(n=233000).index)\ncommute['transportation_type'].value_counts()\n\n\ntransportation_type\nWalk               36364\nPrivate Vehicle    36363\nWork From Home     36004\nPublic Transit     33144\nOther              16077\nBicycle             5869\nName: count, dtype: int64\n\n\nIt is still important to note that this data is no longer representative of the total population, as the groups have been artificially imbalanced. For supervised learning, this is a better balance of the transportation_type variable, but we should keep in mind the altered distribution when making any conclusions.\nThe goal of Naive Bayes is to predictions on your test data using a model that was built using test data. Thus, separating our present data into training and testing datasets is crucial for proper execution. It is generally best practice to partition 80% of this into the test dataset, which is done by specifying test_size in the train_test_split function of sklearn.\nGiven our present data, in order to execute Categorical Naive Bayes, we must encode the categorical data with associated numbers. sklearn, a machine learning software tool in Python which will be used throughout this process, has functions OrdinalEncoder and LabelEncoder to accomplish this. Thus, that will be applied to both train and test datasets once partitioned.\nNote: Code for feature selection with categorical variables partially repurposed from: https://machinelearningmastery.com/feature-selection-with-categorical-data/\n\n\nCode\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom matplotlib import pyplot\n\ndataset = commute.values\nX = dataset[:, :-1]\ny = dataset[:,-1]\nX = X.astype(str)\n\ndef prepare_inputs(X_train, X_test):\n     oe = OrdinalEncoder()\n     oe.fit(X_train)\n     X_train_enc = oe.transform(X_train)\n     X_test_enc = oe.transform(X_test)\n     return X_train_enc, X_test_enc\n\ndef prepare_targets(y_train, y_test):\n     le = LabelEncoder()\n     le.fit(y_train)\n     y_train_enc = le.transform(y_train)\n     y_test_enc = le.transform(y_test)\n     return y_train_enc, y_test_enc\n \ndef select_features(X_train, y_train, X_test):\n     fs = SelectKBest(score_func=chi2, k='all')\n     fs.fit(X_train, y_train)\n     X_train_fs = fs.transform(X_train)\n     X_test_fs = fs.transform(X_test)\n     return X_train_fs, X_test_fs, fs\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nX_train_enc, X_test_enc = prepare_inputs(X_train, X_test)\ny_train_enc, y_test_enc = prepare_targets(y_train, y_test)\n\n\n\n\nPreparing Text Data\nTo prepare this data, we must first combine WMATA and BART datasets of Yelp reviews. Since this is not an exercise in comparing and contrasting the two, it is necessary to leverage the scalability of Naive Bayes classification by consolidating this data. The next steps are to vectorize the text, randomly shuffle the records, and again split into training and test data sets, where 80% of the data belongs to the training set.\nNote: The code for this section is partially repurposed from DSAN-5000 Lab 3.2\n\n\nCode\nyelp=pd.read_csv(\"../data/cleaned_data/yelp_cleaned.csv\")\n\n\n\n\nCode\nreviews=[]\nratings=yelp['Rating']\nfor i in range(0,yelp.shape[0]):\n    keep=\"abcdefghijklmnopqrstuvwxyz \"\n    replace=\".,!;\"\n    tmp=\"\"\n    for char in yelp['Review'][i].replace(\"&lt;br /&gt;\",\"\").lower():\n        if char in replace:\n            tmp+=\" \"\n        if char in keep:\n            tmp+=char\n    tmp=\" \".join(tmp.split())\n    reviews.append(tmp)\n\nratings = np.array(ratings)\n\n\n\n\nCode\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndef vectorize(corpus,MAX_FEATURES):\n    vectorizer=CountVectorizer(max_features=MAX_FEATURES,stop_words=\"english\")   \n\n    Xs  =  vectorizer.fit_transform(corpus)   \n    X=np.array(Xs.todense())\n\n    maxs=np.max(X,axis=0)\n    return (np.ceil(X/maxs),vectorizer.vocabulary_)\n\n(x,vocab0)=vectorize(reviews,MAX_FEATURES=10000)\nvocab1 = dict([(value, key) for key, value in vocab0.items()])\ndf2=pd.DataFrame(x)\ns = df2.sum(axis=0)\ndf2=df2[s.sort_values(ascending=False).index[:]]\n#print(df2.head())\ni1=0\nvocab2={}\nfor i2 in list(df2.columns):\n    vocab2[i1]=vocab1[int(i2)]\n    i1+=1\ndf2.columns = range(df2.columns.size)\nx=df2.to_numpy()\n\n\n\n\n\nCode\nimport random\nN=x.shape[0]\nl = [*range(N)]\ncut = int(0.8 * N)\nrandom.shuffle(l)\ntrain_index = l[:cut]\ntest_index = l[cut:]\n\nprint(train_index[0:10])\nprint(test_index[0:10])\n\n\n[427, 660, 1495, 1509, 1076, 1876, 730, 738, 146, 684]\n[393, 525, 2400, 1428, 399, 53, 2188, 1916, 2364, 456]"
  },
  {
    "objectID": "naive_bayes/naive_bayes.html#feature-selection",
    "href": "naive_bayes/naive_bayes.html#feature-selection",
    "title": "Naive Bayes",
    "section": "Feature Selection",
    "text": "Feature Selection\n\nFeature Selection for Record Data\nThe following code and output provides the feature selection process for our record data.\n\n\nCode\nX_train_fs, X_test_fs, fs = select_features(X_train_enc, y_train_enc, X_test_enc)\nfor i in range(len(fs.scores_)):\n     print(str(commute.columns[i]) + \": \" + str(fs.scores_[i]))\npyplot.bar([i for i in range(len(fs.scores_))], fs.scores_)\npyplot.show()\n\n\nsex: 413.7170268487656\nmarital_status: 1073.8327696873725\nrace: 8301.788540304213\nhispanic: 139.35812553260118\nemployment: nan\n\n\n\n\n\n\n\nFeature Selection for Text Data\nThe following code and output provides the feature selection process for our text data.\n\n\nCode\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\nimport time\n\ndef train_MNB_model(X,Y,i_print=False):\n\n    if(i_print):\n        print(X.shape,Y.shape)\n\n    #SPLIT\n    x_train=X[train_index]\n    y_train=Y[train_index].flatten()\n\n    x_test=X[test_index]\n    y_test=Y[test_index].flatten()\n\n    # INITIALIZE MODEL \n    model = MultinomialNB()\n\n    # TRAIN MODEL \n    start = time.process_time()\n    model.fit(x_train,y_train)\n    time_train=time.process_time() - start\n\n    # LABEL PREDICTIONS FOR TRAINING AND TEST SET \n    start = time.process_time()\n    yp_train = model.predict(x_train)\n    yp_test = model.predict(x_test)\n    time_eval=time.process_time() - start\n\n    acc_train= accuracy_score(y_train, yp_train)*100\n    acc_test= accuracy_score(y_test, yp_test)*100\n\n    if(i_print):\n        print(acc_train,acc_test,time_train,time_eval)\n\n    return (acc_train,acc_test,time_train,time_eval)\n\n\n#TEST\nprint(type(x),type(ratings))\nprint(x.shape,ratings.shape)\n(acc_train,acc_test,time_train,time_eval)=train_MNB_model(x,ratings,i_print=True)\n\n\n&lt;class 'numpy.ndarray'&gt; &lt;class 'numpy.ndarray'&gt;\n(2435, 10000) (2435,)\n(2435, 10000) (2435,)\n87.83367556468173 56.05749486652978 0.1518350000000055 0.15289999999998827\n\n\n\n\nCode\ndef initialize_arrays():\n    global num_features,train_accuracies\n    global test_accuracies,train_time,eval_time\n    num_features=[]\n    train_accuracies=[]\n    test_accuracies=[]\n    train_time=[]\n    eval_time=[]\n\ninitialize_arrays()\n\n# DEFINE SEARCH FUNCTION\ndef partial_grid_search(num_runs, min_index, max_index):\n    for i in range(1, num_runs+1):\n        # SUBSET FEATURES \n        upper_index=min_index+i*int((max_index-min_index)/num_runs)\n        xtmp=x[:,0:upper_index]\n\n        #TRAIN \n        (acc_train,acc_test,time_train,time_eval)=train_MNB_model(xtmp,ratings,i_print=False)\n\n        if(i%5==0):\n            print(i,upper_index,xtmp.shape[1],acc_train,acc_test)\n            \n        #RECORD \n        num_features.append(xtmp.shape[1])\n        train_accuracies.append(acc_train)\n        test_accuracies.append(acc_test)\n        train_time.append(time_train)\n        eval_time.append(time_eval)\n\n# DENSE SEARCH (SMALL NUMBER OF FEATURES (FAST))\npartial_grid_search(num_runs=100, min_index=0, max_index=1000)\n\n# SPARSE SEARCH (LARGE NUMBER OF FEATURES (SLOWER))\npartial_grid_search(num_runs=20, min_index=1000, max_index=10000)\n\n\n5 50 50 44.866529774127315 43.121149897330596\n10 100 100 51.74537987679672 49.28131416837782\n15 150 150 55.28747433264887 48.870636550308014\n20 200 200 57.13552361396304 49.48665297741273\n25 250 250 58.983572895277206 50.92402464065708\n30 300 300 61.601642710472284 50.308008213552355\n35 350 350 63.29568788501027 50.308008213552355\n40 400 400 63.80903490759754 51.54004106776181\n45 450 450 64.27104722792608 49.89733059548255\n50 500 500 66.4271047227926 51.74537987679672\n55 550 550 67.71047227926078 51.74537987679672\n60 600 600 68.63449691991786 51.129363449691986\n65 650 650 68.99383983572895 50.308008213552355\n70 700 700 69.04517453798768 51.33470225872689\n75 750 750 70.99589322381931 51.74537987679672\n80 800 800 72.07392197125256 50.71868583162218\n85 850 850 73.1006160164271 51.54004106776181\n90 900 900 74.33264887063655 51.95071868583162\n95 950 950 75.05133470225873 51.54004106776181\n100 1000 1000 75.71868583162218 50.92402464065708\n5 3250 3250 88.44969199178645 54.62012320328542\n10 5500 5500 89.5277207392197 55.03080082135524\n15 7750 7750 88.75770020533881 56.67351129363449\n20 10000 10000 87.83367556468173 56.05749486652978\n\n\n\n\nCode\ndef save_results(path_root):\n    out=np.transpose(np.array([num_features,train_accuracies,test_accuracies,train_time,eval_time])) \n    out=pd.DataFrame(out)\n    out.to_csv(path_root+\".csv\")\n\ndef plot_results(path_root):\n    plt.plot(num_features,train_accuracies,'-or')\n    plt.plot(num_features,test_accuracies,'-ob')\n    plt.xlabel('Number of features')\n    plt.ylabel('ACCURACY: Training (blue) and Test (red)')\n    plt.savefig(path_root+'-1.png')\n    plt.show()\n\n    plt.plot(num_features,np.array(train_accuracies)-np.array(test_accuracies),'-or')\n    plt.xlabel('Number of features')\n    plt.ylabel('train_accuracies-test_accuracies')\n    plt.savefig(path_root+'-4.png')\n    plt.show()\n\nsave_results('../data/naive_bayes'+\"/partial_grid_search\")\nplot_results('../data/naive_bayes'+\"/partial_grid_search\")\n\n\n\n\n\n\n\n\n\n\nCode\nx_var=np.var(x,axis=0)\nfrom sklearn.feature_selection import VarianceThreshold\n\n# DEFINE GRID OF THRESHOLDS \nnum_thresholds=30\nthresholds=np.linspace(np.min(x_var),np.max(x_var),num_thresholds)\n\n#DOESN\"T WORK WELL WITH EDGE VALUES \nthresholds=thresholds[1:-2]; #print(thresholds)\n\n# INITIALIZE ARRAYS\ninitialize_arrays()\n\n# SEARCH FOR OPTIMAL THRESHOLD\nfor THRESHOLD in thresholds:\n    feature_selector = VarianceThreshold(threshold=THRESHOLD)\n    xtmp=feature_selector.fit_transform(x)\n    print(\"THRESHOLD =\",THRESHOLD, xtmp.shape[1])\n\n    (acc_train,acc_test,time_train,time_eval)=train_MNB_model(xtmp,ratings,i_print=False)\n             \n    #RECORD \n    num_features.append(xtmp.shape[1])\n    train_accuracies.append(acc_train)\n    test_accuracies.append(acc_test)\n    train_time.append(time_train)\n    eval_time.append(time_eval)\n\n\nTHRESHOLD = 0.008536336885337658 1167\nTHRESHOLD = 0.016662164808711497 621\nTHRESHOLD = 0.02478799273208534 421\nTHRESHOLD = 0.032913820655459176 301\nTHRESHOLD = 0.041039648578833014 225\nTHRESHOLD = 0.04916547650220686 178\nTHRESHOLD = 0.0572913044255807 143\nTHRESHOLD = 0.06541713234895453 110\nTHRESHOLD = 0.07354296027232837 91\nTHRESHOLD = 0.08166878819570221 76\nTHRESHOLD = 0.08979461611907605 60\nTHRESHOLD = 0.0979204440424499 53\nTHRESHOLD = 0.10604627196582374 41\nTHRESHOLD = 0.11417209988919758 40\nTHRESHOLD = 0.12229792781257141 33\nTHRESHOLD = 0.13042375573594525 29\nTHRESHOLD = 0.1385495836593191 25\nTHRESHOLD = 0.14667541158269293 21\nTHRESHOLD = 0.15480123950606678 16\nTHRESHOLD = 0.1629270674294406 13\nTHRESHOLD = 0.17105289535281445 10\nTHRESHOLD = 0.17917872327618828 8\nTHRESHOLD = 0.18730455119956213 8\nTHRESHOLD = 0.19543037912293598 8\nTHRESHOLD = 0.2035562070463098 8\nTHRESHOLD = 0.21168203496968366 5\nTHRESHOLD = 0.21980786289305748 4\n\n\n\n\nCode\nsave_results(\"../data/naive_bayes\"+\"/variance_threshold\")\nplot_results(\"../data/naive_bayes\"+\"/variance_threshold\")"
  },
  {
    "objectID": "naive_bayes/naive_bayes.html#naive-bayes",
    "href": "naive_bayes/naive_bayes.html#naive-bayes",
    "title": "Naive Bayes",
    "section": "Naive Bayes",
    "text": "Naive Bayes\n\nNaive Bayes with Labeled Record Data\nThe following code, output, and comments show the process for Naive Bayes classification on record data.\n\n\nCode\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.naive_bayes import CategoricalNB\nimport scipy\nfrom scipy import stats\nclf = CategoricalNB(force_alpha=True)\nenc = OrdinalEncoder()\nimport warnings\nwarnings.simplefilter('ignore', np.RankWarning)\nwarnings.simplefilter('ignore', np.ComplexWarning)\nwarnings.filterwarnings('ignore', \"Intel MKL ERROR\")\n\nfeature_cols = feature_cols = [c for c in commute.columns if c != 'transportation_type']\nX_train_df = pd.DataFrame(X_train_enc, columns=feature_cols)\nX_test_df = pd.DataFrame(X_test_enc, columns=feature_cols)\nincluded_vars = ['sex','race','marital_status']\nincluded_vars_df = X_train_df[included_vars].copy()\nsex_marital_corr = stats.spearmanr(included_vars_df['sex'], included_vars_df['marital_status']).statistic\nprint(sex_marital_corr)\nsex_race_corr = stats.spearmanr(included_vars_df['sex'], included_vars_df['race']).statistic\nprint(sex_race_corr)\nrace_marital_corr = stats.spearmanr(included_vars_df['race'], included_vars_df['marital_status']).statistic\nprint(race_marital_corr)\nsex_commute_corr = stats.spearmanr(included_vars_df['sex'], y_train).statistic\nprint(sex_commute_corr)\nrace_commute_corr = stats.spearmanr(included_vars_df['race'], y_train).statistic\nprint(race_commute_corr)\nmarital_commute_corr = stats.spearmanr(included_vars_df['marital_status'], y_train).statistic\nprint(marital_commute_corr)\n\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n-0.005800683251658714\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n0.043882164650110994\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n-0.11339339247229406\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n-0.053964880565975454\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.0.05951068089203682\n\nIntel MKL WARNING: Support of Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) enabled only processors has been deprecated. Intel oneAPI Math Kernel Library 2025.0 will require Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n-0.017725353197317023\n\n\n\n\nCode\nk = 3\nmean_xx_corr = np.mean([sex_marital_corr,sex_race_corr,race_marital_corr])\nmean_xy_corr = np.mean([sex_commute_corr,race_commute_corr,marital_commute_corr])\nprint(f\"Number of features: {k}\")\nmerit_score_numer = k * np.absolute(mean_xy_corr)\nmerit_score_denom = np.sqrt(k + k * (k + 1) * np.absolute(mean_xx_corr))\nmerit_score_s2 = merit_score_numer / merit_score_denom\nprint(f\"Merit score: {merit_score_s2}\")\n\n\nNumber of features: 3\nMerit score: 0.006703356130666423\n\n\n\n\nCode\nenc.fit(X_train)\nX_train_enc = enc.transform(X_train)\nclf.fit(X_train_enc, y_train)\n\n\nCategoricalNB(force_alpha=True)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.CategoricalNBCategoricalNB(force_alpha=True)\n\n\n\n\nCode\nfrom sklearn.metrics import f1_score\nenc.fit(X_test)\nX_test_enc = enc.transform(X_test)\ntest_predictions = clf.predict(X_test_enc)\nf1_score(y_true = y_test, y_pred = test_predictions, average='weighted')\n\n\n0.2893517844889823\n\n\n\n\nCode\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncm = confusion_matrix(y_train, clf.predict(X_train_enc), labels=clf.classes_)\ncmd = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ncmd.plot()\nplt.show()\n\n\n\n\n\n\n\nCode\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncm = confusion_matrix(y_test, clf.predict(X_test_enc), labels=clf.classes_)\ncmd = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ncmd.plot()\nplt.show()\n\n\n\n\n\nBased on the F-score and these confusion matrices, it appears that this method was only somewhat effective at predicting the labels. An F-score of 0.29 is not very high, but for both the training and testing datasets, the most prevalent value in each column is the one on the diagonal. There were a significant amount of respondents who reported Private Vehicle as their primary method of transportation for which the model predicted that they would work from home. This indicates a potential similarity between these two groups. Overall, this was better than if the predictions were just randomly selected, but it is apparent that this is not an exhaustive predictor of the true label.\n\n\nClass Distribution\nThe record data we will be using comes from the IPUMS dataset containing results from the US Census Bureau. Our target variable will be commute_method, which each respondents answer to what their primary mode of transportation is for work. As this data has been cleaned, this categorical variable is portrayed via text with the following classes, with their respective totals:\n\nPrivate Vehicle - 47254 answers\nPublic Transit - 3365\nBicycle - 593\nWalked - 2322\nWorked from Home - 19013\nOther - 1156\n\nThe following is a visualization of the class distribution:\n\n\nNaive Bayes with Labeled Text Data\nThe following code, output, and comments show the process for Naive Bayes classification on record data.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import MultinomialNB\n\n# CONVERT DF TO LIST OF STRINGS \ncorpus=yelp[\"Review\"].to_list()\ny2=yelp[\"Rating\"].to_numpy()\n\nprint(\"number of text chunks = \",len(corpus))\nprint(corpus[0:3])\n\n\nnumber of text chunks =  2435\n[\"What do I know, I'm just a stupid tourist who comes into the city once a year and takes 3-4 subway rides each time.A lot cleaner than some of our Philly train stations, that's for sure. Pretty easy to figure out how to get from place to place with Google maps.Love the contactless method - tap and go.\", 'This Company is A Literally A Gangsters Mafia , an Organized Group of Criminals with uniforms !!! and I\\'ll explain exactly why I say that . (1) they are stilling people\\'s money , by damaging their metro cards on purpose !!! In the Busses and subway train station machines !! All that is happening from one reason only that people would buy another card , and another one , and if you send your damaged card to them ? they taking the card and say goodbye to your card and to your money !!! For example in the last six months , I buy in the beginning of the month , a monthly unlimited metro card , pay 127$ !!! And already twelve times I purchased the same card again and again , I mean in a six months !!! why ? Because suddenly and surprisingly the card after two weeks or so is damaging !!! So you guys probably asking how come ? And why every card ?? So I\\'ll say /ask the same question to you !! How come every time a different card in a different trains and buses of MTA damaging after two weeks or sometimes after one week ?? And if it\\'s happening to me , who can tell me how many people in NY , it\\'s happening to them also in the same way ?? And I don\\'t play with the card or use it in not appropriate way , like throw it like a garbage in places that would damage the card !! No No !! it comes out of the wallet in the morning , I use it in the bus and the train and it goes back to the wallet !!! No games with the card !! But any it gets damaged !!! And every month after two or three weeks of use !!! I don\\'t get to use it the whole mont !!! And I use it only two times in a day , on my way to work and when I go back home !!! And I buy Monthly unlimited on purpose , because I live in Long Island , and working in Brooklyn !!! So the cost of day by day to pay 11$ cost to much for me , only for the transportation , plus I need food so I don\\'t want to spend that much money in every month so I use / Buy the Monthly card !!! But this company decided I guess to still the peoples money !!! And again , if it\\'s happening to me ? Who promises that it\\'s not happening to thousands of people in NY every Month ?? And every day ?? One hundred percent for sure that it\\'s happening to a lot more people !!! And by that ? they forcing people to buy their \" new  technology  card \"  and pay more and more money , The OMNI card !!! instead of pay one time monthly purchase metro card and use it for a monthly unlimited uses the people have to pay for each ride separately !!! (2) Look in the Subway tunnels , always dirty like a pothole\\'s !!! Full of Homeless people that bother everyone , including tourists !!! And the company making millions and Billions of money !!! where that money goes ?? Look at their representatives !!! How they treating innocent people that come to ask simple questions about how to use this and how to do that , or for directions to somewhere !!! Go by yourself , Go to places like Flushing NY !!! Or Bronx !! Or Brooklyn NY !!! insulting People , and they get out of it without any punishment !!! why ?? Because they are a Big organized  company!!! And they can bring to the courthouses more lawyers !!  And know exactly that you can not allow to yourself to pay !!! And they pay them with the money they stilling from the people !!! the individual citizens can not do anything against them !!! That\\'s why they are the only one company in NY !!! They are the only Monopoly company in NY , and They Have the union that Belongs to them , and fallow the American History , how the Union started to build up in America !!! And the people in NY city don\\'t have any other choice only to use their services , Because ther is no other companies around in the area to use their services with a normal price to go to places from the five boroughs to Manhattan and back !!! and you can not to talk with them even !!! Like Every other Gangster in the world , they will call the police on you !!! And will put you in jail for at least seven years !!!  But they they can talk to you whatever way they want !! To insult you !!! And kick you out of the bus or the train and you can\\'t do nothing at all against them !!! In other words ?? They are A Big Cruel Filthy Mafia !!! Gangsters !!! Nothing else !!! That\\'s what I feel on this MTA Company !!! I wish I had another choice to use other companies cervices in a reasonable prices to go to work and back !! But there is non of them !!!', 'The Q65 bus tonight has no screens on to show the routes, too dark to see any signs, missed a stop, had to shout twice for back door to get off a stop. Why  are we paying for services at night anyway?']\n\n\n\n\nCode\nvectorizer=CountVectorizer(min_df=0.001)   \n\n# RUN COUNT VECTORIZER ON OUR COURPUS \ntext_Xs  =  vectorizer.fit_transform(corpus)   \ntext_X=np.array(text_Xs.todense())\n\n#CONVERT TO ONE-HOT VECTORS\nmaxs=np.max(text_X,axis=0)\ntext_X=np.ceil(text_X/maxs)\n\n# DOUBLE CHECK \nprint(text_X.shape,y2.shape)\nprint(\"DATA POINT-0:\",text_X[0,0:10],\"  y2 =\",y2[0])\n\n\n(2435, 5804) (2435,)\nDATA POINT-0: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]   y2 = 4\n\n\n\n\nCode\nfrom sklearn.model_selection import train_test_split\n\ntest_ratio=0.2\n\n# SPLIT ARRAYS OR MATRICES INTO RANDOM TRAIN AND TEST SUBSETS.\ntext_x_train, text_x_test, text_y_train, text_y_test = train_test_split(text_X, y2, test_size=test_ratio, random_state=0)\ntext_y_train=text_y_train.flatten()\ntext_y_test=text_y_test.flatten()\n\nprint(\"x_train.shape        :\",text_x_train.shape)\nprint(\"y_train.shape        :\",text_y_train.shape)\n\nprint(\"X_test.shape     :\",text_x_test.shape)\nprint(\"y_test.shape     :\",text_y_test.shape)\nprint(text_y_train[0:100])\n\n\nx_train.shape       : (1948, 5804)\ny_train.shape       : (1948,)\nX_test.shape        : (487, 5804)\ny_test.shape        : (487,)\n[1 3 4 3 2 1 2 1 4 1 1 5 1 4 2 1 1 2 3 2 4 1 1 1 2 4 1 1 5 4 2 1 1 1 5 1 2\n 2 1 4 5 1 2 1 4 1 1 1 1 2 1 4 5 1 3 1 1 1 4 3 1 4 3 3 3 1 3 4 1 1 3 1 3 3\n 1 5 1 4 4 1 5 3 1 3 3 1 5 3 1 2 1 5 2 4 1 1 4 2 5 3]\n\n\n\n\nCode\nfrom sklearn import model_selection\n\ndef report(y,ypred):\n      #ACCURACY COMPUTE \n      print(\"Accuracy:\",accuracy_score(y, ypred)*100)\n      print(\"Number of mislabeled points out of a total %d points = %d\"\n            % (y.shape[0], (y != ypred).sum()))\n\ndef print_model_summary(model):\n      # LABEL PREDICTIONS FOR TRAINING AND TEST SET \n      text_yp_train = model.predict(text_x_train)\n      text_yp_test = model.predict(text_x_test)\n\n      print(\"ACCURACY CALCULATION\\n\")\n\n      print(\"TRAINING SET:\")\n      report(text_y_train,text_yp_train)\n\n      print(\"\\nTEST SET (UNTRAINED DATA):\")\n      report(text_y_test,text_yp_test)\n\n      print(\"\\nCHECK FIRST 20 PREDICTIONS\")\n      print(\"TRAINING SET:\")\n      print(text_y_train[0:20])\n      print(text_yp_train[0:20])\n      print(\"ERRORS:\",text_yp_train[0:20]-text_y_train[0:20])\n\n      print(\"\\nTEST SET (UNTRAINED DATA):\")\n      print(text_y_test[0:20])\n      print(text_yp_test[0:20])\n      print(\"ERRORS:\",text_yp_test[0:20]-text_y_test[0:20])\n\n\n\n\nCode\nmodel = MultinomialNB()\nmodel.fit(text_x_train,text_y_train)\nprint_model_summary(model)\n\n\nACCURACY CALCULATION\n\nTRAINING SET:\nAccuracy: 89.11704312114989\nNumber of mislabeled points out of a total 1948 points = 212\n\nTEST SET (UNTRAINED DATA):\nAccuracy: 52.361396303901444\nNumber of mislabeled points out of a total 487 points = 232\n\nCHECK FIRST 20 PREDICTIONS\nTRAINING SET:\n[1 3 4 3 2 1 2 1 4 1 1 5 1 4 2 1 1 2 3 2]\n[1 3 4 4 2 1 4 1 4 1 1 5 1 4 1 1 1 4 3 1]\nERRORS: [ 0  0  0  1  0  0  2  0  0  0  0  0  0  0 -1  0  0  2  0 -1]\n\nTEST SET (UNTRAINED DATA):\n[5 1 1 2 1 2 3 2 4 1 5 4 1 5 5 1 1 2 3 4]\n[4 1 1 3 1 4 4 1 4 1 4 4 1 4 4 1 1 1 3 1]\nERRORS: [-1  0  0  1  0  2  1 -1  0  0 -1  0  0 -1 -1  0  0 -1  0 -3]\n\n\n\n\nCode\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncm = confusion_matrix(text_y_train, model.predict(text_x_train), labels=model.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\ndisp.plot()\nplt.show()\n\n\n\n\n\n\n\nCode\ncm = confusion_matrix(text_y_test, model.predict(text_x_test), labels=model.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\ndisp.plot()\nplt.show()\n\n\n\n\n\nThese confusion matrices and accuracy scores show that the Naive Bayes method was very effective on the training dataset, and significantly less effective for the test set. An accuracy score of almost 90 is worth paying attention to, and the confusion matrix backs that up with large values on the diagonal. However, for the test data, this accuracy score dropped to just over 50. It is reasonable to conclude that this algorithm has its shortcomings when attempting to predict new data. Much of that is likely due to a lack of an established pattern within the data. In other words, the relationship between ratings and their respective text review is not consistent from one sample to another. Nonetheless, we can see from the final confusion matrix that the largest prediction value for each true value is on the diagonal for all labels, which does indicate that this is better than random chance."
  },
  {
    "objectID": "naive_bayes/naive_bayes.html#footnotes",
    "href": "naive_bayes/naive_bayes.html#footnotes",
    "title": "Naive Bayes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“1.9. naive Bayes,” scikit, https://scikit-learn.org/stable/modules/naive_bayes.html (accessed Nov. 2, 2023).↩︎"
  },
  {
    "objectID": "arm/arm.html",
    "href": "arm/arm.html",
    "title": "ARM",
    "section": "",
    "text": "Build out your website tab for “ARM”"
  },
  {
    "objectID": "cleaning/cleaning.html",
    "href": "cleaning/cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "To see all cleaned data click here"
  },
  {
    "objectID": "cleaning/cleaning.html#footnotes",
    "href": "cleaning/cleaning.html#footnotes",
    "title": "Data Cleaning",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“Ridership Report.” American Public Transportation Association, 21 Sept. 2023, www.apta.com/research-technical-resources/transit-statistics/ridership-report/.↩︎\nSteven Ruggles, Sarah Flood, Matthew Sobek, Danika Brockman, Grace Cooper, Stephanie Richards, and Megan Schouweiler. IPUMS USA: Version 13.0 [dataset]. Minneapolis, MN: IPUMS, 2023. https://doi.org/10.18128/D010.V13.0↩︎\n“Raw monthly ridership (no adjustments or estimates),” Raw Monthly Ridership (No Adjustments or Estimates) | FTA, https://www.transit.dot.gov/ntd/data-product/monthly-module-raw-data-release (accessed Nov. 14, 2023).↩︎\n“Metropolitan Transportation Authority - New York, NY,” Yelp, https://www.yelp.com/biz/metropolitan-transportation-authority-new-york-6 (accessed Nov. 14, 2023).↩︎\n“Metro Los Angeles - Los Angeles, CA,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 14, 2023).↩︎\n“Chicago Transit Authority - Chicago, IL,” Yelp, https://www.yelp.com/biz/metro-los-angeles-los-angeles (accessed Nov. 14, 2023).↩︎\n“Septa - Philadelphia, PA,” Yelp, https://www.yelp.com/biz/septa-philadelphia-7 (accessed Nov. 14, 2023).↩︎\n“Massachusetts Bay Transportation Authority - Boston, MA,” Yelp, https://www.yelp.com/biz/massachusetts-bay-transportation-authority-boston (accessed Nov. 14, 2023).↩︎\n“WMATA - Washington, DC, DC,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 2, 2023).↩︎\n“Bart - Bay Area Rapid Transit - Oakland, CA,” Yelp, https://www.yelp.com/biz/bart-bay-area-rapid-transit-oakland-2 (accessed Nov. 2, 2023).↩︎\nBarrero, Jose Maria, et al. Why Working from Home Will Stick, 2021, https://doi.org/10.3386/w28731.↩︎"
  },
  {
    "objectID": "data/data.html",
    "href": "data/data.html",
    "title": "Data",
    "section": "",
    "text": "Click here to access the Data folder of Github repository\n\nBelow are the tabs for this portion of the report:\n\nData Gathering\nData Cleaning\nExploratory Data Analysis"
  },
  {
    "objectID": "data/data.html#footnotes",
    "href": "data/data.html#footnotes",
    "title": "Data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“Quarterly and Annual Totals by Mode​​​,” American Public Transportation Association, https://www.apta.com/research-technical-resources/transit-statistics/ridership-report/ (accessed Oct. 5, 2023).↩︎"
  },
  {
    "objectID": "gathering/gathering.html",
    "href": "gathering/gathering.html",
    "title": "Data Gathering",
    "section": "",
    "text": "To see all raw data gathered click here"
  },
  {
    "objectID": "gathering/gathering.html#footnotes",
    "href": "gathering/gathering.html#footnotes",
    "title": "Data Gathering",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“Ridership Report.” American Public Transportation Association, 21 Sept. 2023, www.apta.com/research-technical-resources/transit-statistics/ridership-report/.↩︎\nSteven Ruggles, Sarah Flood, Matthew Sobek, Danika Brockman, Grace Cooper, Stephanie Richards, and Megan Schouweiler. IPUMS USA: Version 13.0 [dataset]. Minneapolis, MN: IPUMS, 2023. https://doi.org/10.18128/D010.V13.0↩︎\n“Raw monthly ridership (no adjustments or estimates),” Raw Monthly Ridership (No Adjustments or Estimates) | FTA, https://www.transit.dot.gov/ntd/data-product/monthly-module-raw-data-release (accessed Nov. 14, 2023).↩︎\n“Metropolitan Transportation Authority - New York, NY,” Yelp, https://www.yelp.com/biz/metropolitan-transportation-authority-new-york-6 (accessed Nov. 14, 2023).↩︎\n“Metro Los Angeles - Los Angeles, CA,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 14, 2023).↩︎\n“Chicago Transit Authority - Chicago, IL,” Yelp, https://www.yelp.com/biz/metro-los-angeles-los-angeles (accessed Nov. 14, 2023).↩︎\n“Septa - Philadelphia, PA,” Yelp, https://www.yelp.com/biz/septa-philadelphia-7 (accessed Nov. 14, 2023).↩︎\n“Massachusetts Bay Transportation Authority - Boston, MA,” Yelp, https://www.yelp.com/biz/massachusetts-bay-transportation-authority-boston (accessed Nov. 14, 2023).↩︎\n“WMATA - Washington, DC, DC,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 2, 2023).↩︎\n“Bart - Bay Area Rapid Transit - Oakland, CA,” Yelp, https://www.yelp.com/biz/bart-bay-area-rapid-transit-oakland-2 (accessed Nov. 2, 2023).↩︎\n“Is it actually possible to scrape reviews from yelp with Beautifulsoup?,” Reddit, https://www.reddit.com/r/learnpython/comments/d5a71p/comment/f0mi983/?utm_source=share&utm_medium=web2x&context=3 (accessed Dec. 5, 2023).↩︎\nBarrero, Jose Maria, et al. Why Working from Home Will Stick, 2021, https://doi.org/10.3386/w28731.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About the Author",
    "section": "",
    "text": "Lab 1.1.3\n\n\n\n\n\n\nJosh Sweren is a graduate student in the Data Science and Analytics program at Georgetown University. He received his B.S. in Statistics with minors in Computer Science and Mathematics from the George Washington University in 2020. Since graduating, he has remained in the Washington, D.C. area, and has worked in government consulting for over three years. He currently works as a Business Analyst for an IT contractor, serving under a contract with the United States Department of Agriculture. Originally from New York, Mr. Sweren is eager to learn about Machine Learning and Deep Learning, as well as the broader topics of data visualization and communication. Outside of work, he enjoys playing and watching sports, as well as doing puzzles.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Current Coursework\n\n\n\nDSAN 5000: Data Science and Analytics\n\n\n\nDSAN 5100: Probabilistic Modeling and Statistical Computing\n\n\n\n\n  Relevant Prior Coursework\n\n\n\nBig Data & Analytics\n\n\n\nStatistical Computer Packages\n\n\n\nMathematical Statistics\n\n\n\nCombinatorics\n\n\n\nBayesian Statistics\n\n\n\nTime Series Analysis\n\n\n\nSoftware Engineering"
  },
  {
    "objectID": "introduction/introduction.html#exploring-the-efficacy-of-public-transit-systems-in-the-wake-of-covid-19",
    "href": "introduction/introduction.html#exploring-the-efficacy-of-public-transit-systems-in-the-wake-of-covid-19",
    "title": "Introduction",
    "section": "",
    "text": "Large public transit networks have been a staple of large cities for over a century. However, in large part due to the ramifications of COVID-19, urban areas across the United States of America have seen significant drops in public transit usage. The graph below uses data from the American Public Transportation Association Quarterly Ridership Report1 to show this unprecedented drop and subsequent partial recovery. This will serve as a generalization and basis for the issue which this paper explores.\n\n\n\nTotal Public Transit Ridership in the U.S. Since 2010: Data from American Public Transportation Association Quarterly Ridership Report\n\n\nWhile the plot above shows that this phenomenon has slightly abated as cities have returned to a resemblance of their previous state, usage numbers still significantly lag behind those from before the pandemic. As large portions of state and municipal budgets go to the creation, improvement, and operation of public transit systems, many have started to question the efficacy of urban bus and train networks in the new post-COVID-19 era.\nThe potential consequences of this decline in usage are easy to see. Many believe this calls for decreased funding or elimination of unprofitable public transit, as money should be allocated towards areas where more people will benefit. On the other hand, the presence of affordable and reliable transportation is often seen as a public service, where monetary loss can be accepted for the good of a city and its residents. Ultimately, the extent to which this belief outweighs current and future struggles can be debated indefinitely. Thus, it is important for us to understand the causes of the recent decline and current recovery, what we can expect from public transit usage in the future, and how public transit impacts the city and its residents. The goal of this paper is to explore these topics and respond to the hypothesis that public transit systems still have efficacy because they remain vital staples of their city with great enough long-term demand to offset temporary financial losses.\n\n\n\n\nTo what extent does the public service of public transit offset financial losses?\nWhat are the primary reason for people to use public transit?\nWhat were the primary causes for the rapid decline in public transit usage?\nWhat are the primary causes for the slow recovery in public transit usage?\nTo what extent is the decline in public transit usage permanent?\nHow do recent trends in public transit usage differ between cities?\nHow do recent trends in public transit usage differ between modes of transportation?\nWhat political incentives exist regarding funding, eliminating, or expanding public transit?\nTo what extent do residents typically benefit from increased spending on public transit?\nWho is most affected by changes in public transit ridership and policy?\n\n\n\n\nTo properly answer the questions above, it is important to understand work done by other researchers. Initially, there are two academic publications that provide significant insight into public transit phenomena in 2020. Understanding the events and results of the decline in public transit usage will ultimately inform our understanding of how current events shape public behavior, the role of public transit in urban areas, and the extent to which we can predict a rebound in public transit usage.\n\n\n\nThis publication from September 2020 provides significant insight into what can be observed by studying mobility during the COVID-19 pandemic. Despite a specific focus on Poland, we are able to see how human behavior can be measured and how public transit systems are affected by current events. The paper notes that in addition to studying the affect of a pandemic on public transit, the opposite relationship can occur, where public transportation methods can negatively impact the mitigation of a pandemic. Ultimately, the paper aims to assess the relationships between public transit usage and COVID-19 cases, as well as the former with government stringency.\nIn its methodology, the researchers developed quantifiable metrics to determine government stringency (called Stringency Index) at various times by logging different events of lockdowns, restrictions, and warnings. This, along with already quantified data regarding the status of the pandemic across Poland, was measured alongside mobility metrics such as public transit usage. In the image below, we can see how a relationship was determined through the variables that had been set:\n\n\n\nMobility Changes and Stringency Index\n\n\nUltimately, researchers concluded through analysis of all regions of Poland that despite a relatively mild outbreak of the pandemic, “a combination of government lockdown and social fears of contracting and spreading COVID-19 has caused a substantial reduction in passengers’ public transport demand in Poland.” Meanwhile, a similar relationship between the status of the pandemic (i.e., total cases) and public transit usage. This offers compelling insight for our topic, as it enforces the need to compare different forces in why people may hesitate to use public transit. Additionally, the importance of political decisions are heavily weighed, which turned out to be a telling factor in determining human behavior.\n\n\n\nMuch like the previous article, this publication studied a decline in public transit ridership prior to any eventual rebound. Its data sources are primarily from a widely used transit application to measure changes in demand over time. To accomplish this, the researchers define three key parameters: “base value, the apparent minimal level of demand; cliff and base point, representing the initial date when decline in transit demand began and the final date when decline attenuated, respectively; and decay rate, representing the speed of the demand decline.” Using these metrics, they managed to determine that the impact of COVID-19 on public transit was uneven, often explained by differences in social status.\nBy studying several cities across the United States, this study identified demographic influences in how public transit ridership was affected by COVID-19. Communities with larger minority populations often saw higher base values and less significant declines in ridership, a relationship that was also present for populations that searched for “Coronavirus” less. These communities also correlated heavily with the proportion of essential workers. Ultimately, this indicates that demand for public transit is discretionary. People continue to use public transportation if their occupations and livelihood still necessitate its use.\nThis relates to our questions for the future because it indicates factors that impact people’s public transit usage, many of which are still changing today. In a world where “work-from-home” remains more prevalent than prior to the pandemic, it stands to reason that usage may not fully rebound until people feel it is necessary, not just convenient or inexpensive. Additionally, this publication highlights public transit as a critical infrastructure for underprivileged social groups, which is a necessary consideration when assessing its efficacy."
  },
  {
    "objectID": "gathering/gathering.html#quarterly-and-annual-ridership-totals-by-mode-of-transportation-1",
    "href": "gathering/gathering.html#quarterly-and-annual-ridership-totals-by-mode-of-transportation-1",
    "title": "Data Gathering",
    "section": "Quarterly and Annual Ridership Totals by Mode​ of Transportation 1",
    "text": "Quarterly and Annual Ridership Totals by Mode​ of Transportation 1\nThe initial piece of data that was gathered comes from the American Public Transportation Association, and can serve as an introductory synopsis of the state of public transit ridership over time. This gives a broad view of quarterly ridership across the entire country from 1990 onward. Thus, this data has been chosen for the potential of setting the stage for the problem which we intend to explore.\nThe raw data and methodology for how it was obtained can be found using this link: https://www.apta.com/research-technical-resources/transit-statistics/ridership-report/\nThe data itself can be downloaded using this link: https://www.apta.com/wp-content/uploads/APTA-Ridership-by-Mode-and-Quarter-1990-Present.xlsx\nTo download this data, I used an R API tool, which saves the data in Excel format. Below is the code for this action and a screenshot of the raw data to illustrate its form upon download:\n\n\nCode\nlibrary(readxl)\nlibrary(httr)\nurl1&lt;-'https://www.apta.com/wp-content/uploads/APTA-Ridership-by-Mode-and-Quarter-1990-Present.xlsx'\nGET(url1, write_disk(tf &lt;- tempfile(pattern = \"APTA-Ridership-by-Mode-and-Quarter-1990-Present\", fileext = \".xlsx\", tmpdir = \"../data\")))\ndf &lt;- read_excel(tf, 2L)\nstr(df)\n\n\n\n\n\nQuarterly and Annual Ridership Totals by Mode​ of Transportation"
  },
  {
    "objectID": "gathering/gathering.html#census-data-for-commute-to-work-2",
    "href": "gathering/gathering.html#census-data-for-commute-to-work-2",
    "title": "Data Gathering",
    "section": "Census Data for Commute to Work 2",
    "text": "Census Data for Commute to Work 2\nIn answering the question of whether or not public transit’s public service should be the paramount consideration for its efficacy, it is important to understand that it often provides service disproportionally to underprivileged groups. Therefore, a source of data that will be useful is a survey dataset from IPUMS, which has millions of survey responses from the U.S. Census Bureau. We will be using the survey data gathered from 2021, the most recent sample available, and one with a significantly large volume of responses. The main reason for obtaining this data is the presence of a “Means of transportation to work” field, which will serve as our labels for supervised learning. This can tell us the commute methods for a large sample of respondents, whom we can analyze by looking at demographic and lifestyle data to gather insights on what factors into one’s means of transportation to work.\nThis data was gathered via the IPUMS website by selecting a sample (2021) and specifying fields that will be required for further analysis. IPUMS provides numeric codes for categorical variables and to represent NA values, the meanings of which are specified on their website. This will be useful in cleaning the data. The fields for this data extract are below:\n\n\n\nSurvey Extract Fields\n\n\nAfter extracting, the data appears as the following:\n\n\n\nSurvey Raw Dataset"
  },
  {
    "objectID": "gathering/gathering.html#public-transit-data-by-city3",
    "href": "gathering/gathering.html#public-transit-data-by-city3",
    "title": "Data Gathering",
    "section": "Public Transit Data by City3",
    "text": "Public Transit Data by City3\nJust as not every city was equally impacted by the COVID-19 pandemic, the performance of public transit differs drastically depending on where one goes in the US. Our goal here is to assess what factors impact public transit ridership and cost-effectiveness for a city to determine any action items that can be taken to improve such metrics. Every quarter, the American Public Transit Association (APTA) conducts a Ridership Report which includes key performance indicators of public transit systems across the US. Our analysis will use data from their Third Quarter 2023 Ridership Report, which is the most recent one available at the time of writing this.\nThe observational unit for this data is not city, but rather type of transportation. Therefore, any given city may have several rows, possibly split into Agency, as multiple organizations may serve a single city to provide service to its residents. These agencies are also split by row, corresponding to the mode of transportation. Another notable aspect of this data is that it includes general information about each city, such as population and area. In this case, records have the same value in these columns for each city, so when cleaning, we can consolidate records by city and not worry about conflating differing values. This will allow us to not only focus on features of public transit systems in a vacuum, but also observe characteristics of cities that may lead to various public transit phenomena. A screenshot of the raw data gathered from APTA is below:\n\n\n\nPublic Transit Data by City"
  },
  {
    "objectID": "gathering/gathering.html#yelp-reviews",
    "href": "gathering/gathering.html#yelp-reviews",
    "title": "Data Gathering",
    "section": "Yelp Reviews",
    "text": "Yelp Reviews\nGauging public sentiment regarding public transit systems can be a great way to analyze the relationship between said system and the residents of its respective city. Regardless of external factors, consumer dissatisfaction of a mode of transportation could greatly influence its usage when other methods are readily available for many. Thus, these datasets will feature Yelp reviews of the top seven most used public transit systems in the US, as measured by the data gathered from the American Public Transit Association. These public transit systems are:\n\nMetropolitan Transit Authority (New York City)4\nLos Angeles County Metropolitan Transportation Authority5\nChicago Transit Authority6\nSoutheastern Pennsylvania Transportation Authority (Philadelphia)7\nMassachusetts Bay Transportation Authority (Boston)8\nBay Area Rapid Transit (San Francisco Bay Area)9\nWashington Metropolitan Area Transit Authority (Washington, D.C.)10\n\nThis data will include the date of review, the exact text, and the associated numerical rating (1-5 stars). Gathering labeled text data will be invaluable for Naive Bayes classification in the future. To accomplish this, I will use the BeautifulSoup package in Python, which facilitates web scraping via HTML codes. Since the reviews span several pages, it is necessary to iterate over each page to obtain every review available to us. Therefore, I adapted a generalized function for both reading in the data and storing it as a pandas dataframe.11 The code for that function is below:\n\n\nCode\nimport pandas as pd\nimport csv\nimport requests\nfrom bs4 import BeautifulSoup\ndef get_yelp(url, pages):   \n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    hold1 = soup.find(string='Recommended Reviews')\n    if hold1 is not None:\n        reviews = hold1.find_parent('section')\n    num_rating1 = []\n    review_date1 = []\n    review_text1 = []\n    for review in reviews.select('div[aria-label$=\"star rating\"]'):\n        num_rating1.append(review['aria-label'])\n        review_date1.append(review.find_next('span').text)\n        hold = review.find_next('span', lang=True)\n        if hold is None:\n            review_text1.append(\"NA\")\n        else:\n            review_text1.append(hold.text)\n\n    for i in range(1,pages):\n        r = requests.get(url + '?start=' + str(i) + '0')\n        soup = BeautifulSoup(r.text, 'html.parser')\n        hold1 = soup.find(string='Recommended Reviews')\n        if hold1 is not None:\n            reviews = hold1.find_parent('section')\n        for review in reviews.select('div[aria-label$=\"star rating\"]'):\n            num_rating1.append(review['aria-label'])\n            review_date1.append(review.find_next('span').text)\n            hold = review.find_next('span', lang=True)\n            if hold is None:\n                review_text1.append(\"NA\")\n            else:\n                review_text1.append(hold.text)\n    reviews = pd.DataFrame(list(zip(num_rating1,review_date1,review_text1)))\n    return(reviews)\n\n\nUpon creating and running the function above, we can now call it using our seven most used public transit systems in the US. The inputs for this function are the following:\n\nThe URL for the first page on Yelp\nThe number of pages of reviews\n\nThe code for calling this function is below, with an example of the output attached:\n\n\nCode\nget_yelp('https://www.yelp.com/biz/metropolitan-transportation-authority-new-york-6',14).to_csv('../data/yelp_reviews/mta_reviews.csv')\nget_yelp('https://www.yelp.com/biz/metro-los-angeles-los-angeles',18).to_csv('../data/yelp_reviews/la_reviews.csv')\nget_yelp('https://www.yelp.com/biz/chicago-transit-authority-chicago-6',38).to_csv('../data/yelp_reviews/cta_reviews.csv')\nget_yelp('https://www.yelp.com/biz/septa-philadelphia-7',10).to_csv('../data/yelp_reviews/septa_reviews.csv')\nget_yelp('https://www.yelp.com/biz/massachusetts-bay-transportation-authority-boston',34).to_csv('../data/yelp_reviews/mbta_reviews.csv')\nget_yelp('https://www.yelp.com/biz/bart-bay-area-rapid-transit-oakland-2',101).to_csv('../data/yelp_reviews/bart_reviews.csv')\nget_yelp('https://www.yelp.com/biz/wmata-washington',10).to_csv('../data/yelp_reviews/wmata_reviews.csv')\n\n\n\n\n\nWMATA Yelp Reviews"
  },
  {
    "objectID": "gathering/gathering.html#remote-work-trends-12",
    "href": "gathering/gathering.html#remote-work-trends-12",
    "title": "Data Gathering",
    "section": "Remote Work Trends 12",
    "text": "Remote Work Trends 12\nIt is reasonable to hypothesize that one of the main factors in public transit usage is people commuting to and from work. The term “rush hour” is a seemingly daily phrase, meaning the times in the morning and evening at which most people go to or return from their occupation. Thus, when COVID-19 struck and many workers were no longer expected to go to work in-person, the need for public transportation decreased drastically.\nIn the years since, remote work has been a topic of controversy. Many workers enjoy the benefits of privacy and the added time of not having to commute, while employers often cite advantages of being on-site even in office jobs. While in-person work has rebounded recently, much like public transit usage, it has not nearly returned to the prevalence of prior to the pandemic. Therefore, understanding trends surrounding remote work can provide insights on how to analyze public transportation trends.\nWFH Research has exhaustive data sets regarding remote work information. For the purposes of this project, we will take into account three data sets. To better understand the controversial aspects of remote work, the first two data sets contain survey information from (a) employers and (b) workers on what they desire in terms of average remote work days per week. The third data set provides time series information on the amount of working from home (percent of full paid days) for large cities. Screenshots of the raw data are shown below:\n\n\n\nRemote Work Desires of Employers\n\n\n\n\n\nRemote Work Desires of Workers\n\n\n\n\n\nRemote Work Percentages by City"
  },
  {
    "objectID": "naive_bayes/naive_bayes.html#conclusions",
    "href": "naive_bayes/naive_bayes.html#conclusions",
    "title": "Naive Bayes",
    "section": "Conclusions",
    "text": "Conclusions\nWhile there are clear shortcomings with the Naive Bayes methodology for both our record and text data, the ability to make predictions based on similarities within the feature variables is clearly there. Our predictions were more likely than not to match up with actual values.\nThis result tells us that there is value in looking at demographic data for predicting method of transportation for commuting to work. Thus, there are certain groups of people who are more affected by public transit efficiency and ubiquity than others. In terms of social value, that is an important distinction to make."
  },
  {
    "objectID": "eda/eda.html#footnotes",
    "href": "eda/eda.html#footnotes",
    "title": "Exploratory Data Exploration",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSteven Ruggles, Sarah Flood, Matthew Sobek, Danika Brockman, Grace Cooper, Stephanie Richards, and Megan Schouweiler. IPUMS USA: Version 13.0 [dataset]. Minneapolis, MN: IPUMS, 2023. https://doi.org/10.18128/D010.V13.0↩︎\n“Raw monthly ridership (no adjustments or estimates),” Raw Monthly Ridership (No Adjustments or Estimates) | FTA, https://www.transit.dot.gov/ntd/data-product/monthly-module-raw-data-release (accessed Nov. 14, 2023).↩︎\n“Metropolitan Transportation Authority - New York, NY,” Yelp, https://www.yelp.com/biz/metropolitan-transportation-authority-new-york-6 (accessed Nov. 14, 2023).↩︎\n“Metro Los Angeles - Los Angeles, CA,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 14, 2023).↩︎\n“Chicago Transit Authority - Chicago, IL,” Yelp, https://www.yelp.com/biz/metro-los-angeles-los-angeles (accessed Nov. 14, 2023).↩︎\n“Septa - Philadelphia, PA,” Yelp, https://www.yelp.com/biz/septa-philadelphia-7 (accessed Nov. 14, 2023).↩︎\n“Massachusetts Bay Transportation Authority - Boston, MA,” Yelp, https://www.yelp.com/biz/massachusetts-bay-transportation-authority-boston (accessed Nov. 14, 2023).↩︎\n“WMATA - Washington, DC, DC,” Yelp, https://www.yelp.com/biz/wmata-washington (accessed Nov. 2, 2023).↩︎\n“Bart - Bay Area Rapid Transit - Oakland, CA,” Yelp, https://www.yelp.com/biz/bart-bay-area-rapid-transit-oakland-2 (accessed Nov. 2, 2023).↩︎\nBarrero, Jose Maria, et al. Why Working from Home Will Stick, 2021, https://doi.org/10.3386/w28731.↩︎\n“Ridership Report.” American Public Transportation Association, 21 Sept. 2023, www.apta.com/research-technical-resources/transit-statistics/ridership-report/.↩︎"
  }
]